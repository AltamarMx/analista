[
  {
    "objectID": "datos.html",
    "href": "datos.html",
    "title": "1  Datos",
    "section": "",
    "text": "Ubicación de los datos\nSi descargaste el repositorio, verás un folder data en el directorio raíz, ahí se encuentran los datos usados en el curso. \nPuedes entrar a cada conjunto de datos y descargar archivo por archivo si así lo deseas. \n\n\nTemixco_2018_10Min.csv\nEste archivo contiene datos recopilados cada 10 minutos para todo el año 2018. Las columnas del dataset están descritas a continuación:\n\ntime: Fecha y hora del registro en el formato año-mes-día hora:minutos:segundos.\nIb: Radiación directa sobre superficie horizontal (W/m²).\nIg: Radiación global (W/m²).\nTo: Temperatura ambiental (°C).\nRH: Humedad relativa (%).\nWS: Velocidad del viento (m/s).\nWD: Dirección del viento (grados).\nP: Presión atmosférica (hPa).\n\n\n!head ../data/Temixco_2018_10Min.csv\n\ntime,Ib,Ig,To,RH,WS,WD,P\n2018-01-01 00:00:00,,,18.7,36.34,1.422,316.0,87864.11\n2018-01-01 00:10:00,0.002,0.0,18.95,35.29,1.008,283.7,87876.37\n2018-01-01 00:20:00,0.17,0.0,18.94,35.43,1.565,326.0,87888.64\n2018-01-01 00:30:00,0.371,0.0,18.77,35.89,2.175,354.5,87887.21\n2018-01-01 00:40:00,0.305,0.0,18.81,36.34,1.902,348.0,87886.90999999999\n2018-01-01 00:50:00,0.031,0.0,19.23,35.4,1.468,6.668,87889.36\n2018-01-01 01:00:00,0.034,0.0,19.23,35.67,1.368,11.67,87894.78\n2018-01-01 01:10:00,0.178,0.0,19.25,35.6,1.122,3.498,87899.54\n2018-01-01 01:20:00,0.001,0.0,19.21,35.97,0.332,64.51,87896.81999999999\n\n\n\n\nTemixco_2018_10Min.xls\nEste archivo contiene datos recopilados cada 10 minutos para todo el año 2018 al igual que Temixco_2018_10Min.csv pero en formato xlsx\n\n\nTemixco_2018_10Min.parquet\nEste archivo contiene datos recopilados cada 10 minutos para todo el año 2018 al igual que Temixco_2018_10Min.csv pero en formato parquet\n\n\nTemixco_2018_10Min.csv.zip\nEste archivo contiene datos recopilados cada 10 minutos para todo el año 2018 al igual que Temixco_2018_10Min.csv pero comprimido en formato zip.\n\n\nTemixco_2018_10Min_NaN.csv\nEste archivo contiene datos recopilados cada 10 minutos para todo el año 2018 al igual que Temixco_2018_10Min.csv pero tiene un periodo con datos NaN en marzo y otro periodo donde se eliminaron datos al final del año.\n\n\nupdate.parquet\nEste archivo contiene datos recopilados cada 10 minutos para marzo del año 2018 al igual que Temixco_2018_10Min.csv solo de la columna To. - To: Temperatura ambiental (°C).\n\n\nowid-co2-data.csv\nEste archivo contiene datos relacionados con las emisiones de CO2, la producción de energía y otros indicadores medioambientales y económicos recopilados a nivel mundial. Los datos abarcan diferentes períodos de tiempo según el país y la variable registrada. Las columnas del dataset están descritas a continuación:\n\ncountry: El nombre del país o región.\nyear: Año del registro de datos.\niso_code: Código ISO 3166-1 alfa-3 del país.\npopulation: Población del país en el año especificado.\ngdp: Producto Interno Bruto (PIB) del país en dólares internacionales constantes.\nprimary_energy_consumption: Consumo de energía primaria en teravatios-hora (TWh).\nenergy_per_capita: Consumo de energía per cápita en kilovatios-hora (kWh).\nenergy_per_gdp: Consumo de energía por unidad de PIB en kilovatios-hora por dólar internacional constante.\nco2: Emisiones totales de CO2 en millones de toneladas.\nco2_per_capita: Emisiones de CO2 per cápita en toneladas.\nco2_per_gdp: Emisiones de CO2 por unidad de PIB en kilogramos por dólar internacional constante.\ncoal_co2: Emisiones de CO2 del carbón en millones de toneladas.\noil_co2: Emisiones de CO2 del petróleo en millones de toneladas.\ngas_co2: Emisiones de CO2 del gas natural en millones de toneladas.\ncement_co2: Emisiones de CO2 del cemento en millones de toneladas.\nflaring_co2: Emisiones de CO2 por quema de gas en millones de toneladas.\nother_industry_co2: Emisiones de CO2 de otras industrias en millones de toneladas.\nco2_growth_abs: Crecimiento absoluto de las emisiones de CO2 en millones de toneladas respecto al año anterior.\nco2_growth_prct: Crecimiento porcentual de las emisiones de CO2 respecto al año anterior.\nco2_including_land_use: Emisiones de CO2 incluyendo el uso del suelo en millones de toneladas.\nco2_including_land_use_per_capita: Emisiones de CO2 incluyendo el uso del suelo per cápita en toneladas.\nco2_including_land_use_per_gdp: Emisiones de CO2 incluyendo el uso del suelo por unidad de PIB en kilogramos por dólar internacional constante.\nmethane: Emisiones de metano en millones de toneladas equivalentes de CO2.\nmethane_per_capita: Emisiones de metano per cápita en toneladas equivalentes de CO2.\nmethane_per_gdp: Emisiones de metano por unidad de PIB en kilogramos equivalentes de CO2 por dólar internacional constante.\nnitrous_oxide: Emisiones de óxido nitroso en millones de toneladas equivalentes de CO2.\nnitrous_oxide_per_capita: Emisiones de óxido nitroso per cápita en toneladas equivalentes de CO2.\nnitrous_oxide_per_gdp: Emisiones de óxido nitroso por unidad de PIB en kilogramos equivalentes de CO2 por dólar internacional constante.\nenergy_consumption: Consumo total de energía en teravatios-hora (TWh).\nenergy_consumption_per_capita: Consumo de energía per cápita en kilovatios-hora (kWh).\nenergy_consumption_per_gdp: Consumo de energía por unidad de PIB en kilovatios-hora por dólar internacional constante.\n\n\n\nReferencias\nArtículo:\n@article{owid-co2-gdp-decoupling,\nauthor = {Hannah Ritchie},\ntitle = {Many countries have decoupled economic growth from CO2 emissions, even if we take offshored production into account},\njournal = {Our World in Data},\nyear = {2021},\nnote = {https://ourworldindata.org/co2-gdp-decoupling}\n}\nDatos de:\nOur World in Data CO2 Dataset\n\n\npersonas_cargas.csv\nEste archivo contiene datos recopilados cada minuto durante el primero de enero del 2006. Contiene en la medición de consumo eléctrico y ocupación de diferentes espacios en un edificio. Las columnas del dataset están descritas a continuación:\n\ndate: Fecha y hora del registro en el formato año-mes-día hora:minutos:segundos.\nB2_LIGHT:Lights Electricity Rate (W): Consumo eléctrico en Watts de las luces en la habitación B2.\nB1:Lights Electricity Rate (W): Consumo eléctrico en Watts de las luces en la habitación B1.\nCOCINA_ESTUFA_EQUIPMENT:Electric Equipment Electricity Rate (W): Consumo eléctrico en Watts del equipo de estufa en la cocina.\nCOCINA_REFR_EQUIPMENT:Electric Equipment Electricity Rate (W): Consumo eléctrico en Watts del refrigerador en la cocina.\nESTANCIA_COCINA_LIGHT:Lights Electricity Rate (W): Consumo eléctrico en Watts de las luces en la estancia de la cocina.\nESTANCIA_TV_EQUIPMENT:Electric Equipment Electricity Rate (W): Consumo eléctrico en Watts del equipo de televisión en la estancia.\nR1_LIGHT:Lights Electricity Rate (W): Consumo eléctrico en Watts de las luces en la habitación R1.\nR2_LIGHT:Lights Electricity Rate (W): Consumo eléctrico en Watts de las luces en la habitación R2.\nR3_LIGHT:Lights Electricity Rate (W): Consumo eléctrico en Watts de las luces en la habitación R3.\nCOCINA_STAND_BY_EQUIPMENT:Electric Equipment Electricity Rate (W): Consumo eléctrico en Watts de los equipos en modo de espera en la cocina.\nB1:Space People Occupant Count (): Número de personas presentes en la habitación B1.\nB2:Space People Occupant Count (): Número de personas presentes en la habitación B2.\nCOCINA:Space People Occupant Count (): Número de personas presentes en la cocina.\nR1:Space People Occupant Count (): Número de personas presentes en la habitación R1.\nR2:Space People Occupant Count (): Número de personas presentes en la habitación R2.\nR3:Space People Occupant Count (): Número de personas presentes en la habitación R3.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Datos</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/006_PEP8.html",
    "href": "notebooks/semanaUno/006_PEP8.html",
    "title": "7  PEP8",
    "section": "",
    "text": "7.1 Uso de nombres adecuados\n# MAL\nc = \"Temixco\"\n#BIEN\nciudad = \"Temixco\"",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PEP8</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/006_PEP8.html#uso-adecuado-de-espacios-en-las-declaraciones",
    "href": "notebooks/semanaUno/006_PEP8.html#uso-adecuado-de-espacios-en-las-declaraciones",
    "title": "7  PEP8",
    "section": "7.2 Uso adecuado de espacios en las declaraciones",
    "text": "7.2 Uso adecuado de espacios en las declaraciones\n\n# MAL\nfuncion(argumento=valor)\n#BIEN\nfuncion(argumento = valor)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[1], line 2\n      1 # MAL\n----&gt; 2 funcion(argumento=valor)\n      3 #BIEN\n      4 funcion(argumento = valor)\n\nNameError: name 'funcion' is not defined",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PEP8</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/006_PEP8.html#evita-espacios-en-listas-diccionarios",
    "href": "notebooks/semanaUno/006_PEP8.html#evita-espacios-en-listas-diccionarios",
    "title": "7  PEP8",
    "section": "7.3 Evita espacios en listas, diccionarios",
    "text": "7.3 Evita espacios en listas, diccionarios\n\n#MAL\nlista = [ 1, 2, 3 ]\n#BIEN\nlista = [1, 2, 3]",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PEP8</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/006_PEP8.html#importa-paquetes-siempre-al-inicio-del-archivo",
    "href": "notebooks/semanaUno/006_PEP8.html#importa-paquetes-siempre-al-inicio-del-archivo",
    "title": "7  PEP8",
    "section": "7.4 Importa paquetes siempre al inicio del archivo",
    "text": "7.4 Importa paquetes siempre al inicio del archivo",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PEP8</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/006_PEP8.html#comparación-is-o-is-not",
    "href": "notebooks/semanaUno/006_PEP8.html#comparación-is-o-is-not",
    "title": "7  PEP8",
    "section": "7.5 Comparación is o is not",
    "text": "7.5 Comparación is o is not\n\n#MAL\nif variable == None:\n\n#BIEN\nif variable is None:",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PEP8</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/006_PEP8.html#documenta-tus-funciones",
    "href": "notebooks/semanaUno/006_PEP8.html#documenta-tus-funciones",
    "title": "7  PEP8",
    "section": "7.6 Documenta tus funciones",
    "text": "7.6 Documenta tus funciones\n\ndef suma(a, b):\n    \"\"\"Suma dos números y devuelve el resultado.\"\"\"\n    return a + b",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>PEP8</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/007_PiensaPOO.html",
    "href": "notebooks/semanaUno/007_PiensaPOO.html",
    "title": "8  Piensa POO",
    "section": "",
    "text": "https://github.com/AltamarMx/iertools/blob/main/iertools/read.py\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nclass read_climate:\n    def __init__(self, file_path):\n        \"\"\"\n        Constructor para cargar datos desde un archivo CSV y usar la primera columna como índice y pasarla a objeto datetime.\n        \n        :param file_path: str, la ruta al archivo CSV que se desea cargar.\n        \"\"\"\n        self.data = pd.read_csv(file_path,index_col=0,parse_dates=True)\n    \n    def plot_mean_column(self,column):\n        \"\"\"\n        Función para graficar el promedio diario de una columna específica\n        \n        :param column: str, el nombre de la columna del dataframe.\n        \"\"\"\n        self.data[column].resample(\"D\").mean().plot(subplots=True,figsize=(12,3))\n        plt.show()\n    \n    def calculate_mean(self, column):\n        \"\"\"\n        Función para calcular el promedio de una columna.\n        \n        :param column: str, el nombre de la columna sobre la cual calcular el promedio.\n        \"\"\"\n        return self.data[column].mean()\n\n\ntmx_2018 = read_climate(\"../../data/Temixco_2018_10Min.csv\")\n\n\ntmx_2018.data\n\n\n\n\n\n\n\n\nIb\nIg\nTo\nRH\nWS\nWD\nP\n\n\ntime\n\n\n\n\n\n\n\n\n\n\n\n2018-01-01 00:00:00\nNaN\nNaN\n18.70\n36.34\n1.422\n316.0\n87864.11\n\n\n2018-01-01 00:10:00\n0.002\n0.0\n18.95\n35.29\n1.008\n283.7\n87876.37\n\n\n2018-01-01 00:20:00\n0.170\n0.0\n18.94\n35.43\n1.565\n326.0\n87888.64\n\n\n2018-01-01 00:30:00\n0.371\n0.0\n18.77\n35.89\n2.175\n354.5\n87887.21\n\n\n2018-01-01 00:40:00\n0.305\n0.0\n18.81\n36.34\n1.902\n348.0\n87886.91\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2018-12-31 23:10:00\n0.125\n0.0\n18.51\n47.29\n1.715\n332.2\n87484.32\n\n\n2018-12-31 23:20:00\n0.000\n0.0\n18.26\n48.02\n1.703\n320.5\n87470.70\n\n\n2018-12-31 23:30:00\n0.044\n0.0\n18.39\n46.84\n2.887\n335.7\n87455.03\n\n\n2018-12-31 23:40:00\n0.170\n0.0\n17.99\n47.85\n1.528\n358.8\n87470.02\n\n\n2018-12-31 23:50:00\n0.003\n0.0\n17.75\n49.65\n0.598\n322.3\n87467.29\n\n\n\n\n52560 rows × 7 columns\n\n\n\n\ntmx_2018.plot_mean_column([\"Ib\"])\n\n\n\n\n\n\n\n\n\ntmx_2018.plot_mean_column([\"Ib\",\"To\"])\n\n\n\n\n\n\n\n\n\ntmx_2018.calculate_mean(\"To\")\n\nnp.float64(22.838097602739726)",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Piensa POO</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/008_try_except_finally.html",
    "href": "notebooks/semanaUno/008_try_except_finally.html",
    "title": "9  try-except",
    "section": "",
    "text": "import pandas as pd\n\n\ndef importa_clima(file_path):\n    \"\"\"Importa un archivo CSV y pone la columna 0 como índice, regresa un dataframe vacio si la ruta es incorrecta\"\"\"\n    try:\n        df = pd.read_csv(file_path,index_col=0,parse_dates=True)    \n    except:\n        print(\"El archivo o ruta es incorrecto\")\n        print(file_path)\n        df = None\n    finally:\n        return df\n        \n        \n\n\nimporta_clima(\"../../data/Temixco_2018_10Min.csv\")\n\n\n\n\n\n\n\n\nIb\nIg\nTo\nRH\nWS\nWD\nP\n\n\ntime\n\n\n\n\n\n\n\n\n\n\n\n2018-01-01 00:00:00\nNaN\nNaN\n18.70\n36.34\n1.422\n316.0\n87864.11\n\n\n2018-01-01 00:10:00\n0.002\n0.0\n18.95\n35.29\n1.008\n283.7\n87876.37\n\n\n2018-01-01 00:20:00\n0.170\n0.0\n18.94\n35.43\n1.565\n326.0\n87888.64\n\n\n2018-01-01 00:30:00\n0.371\n0.0\n18.77\n35.89\n2.175\n354.5\n87887.21\n\n\n2018-01-01 00:40:00\n0.305\n0.0\n18.81\n36.34\n1.902\n348.0\n87886.91\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2018-12-31 23:10:00\n0.125\n0.0\n18.51\n47.29\n1.715\n332.2\n87484.32\n\n\n2018-12-31 23:20:00\n0.000\n0.0\n18.26\n48.02\n1.703\n320.5\n87470.70\n\n\n2018-12-31 23:30:00\n0.044\n0.0\n18.39\n46.84\n2.887\n335.7\n87455.03\n\n\n2018-12-31 23:40:00\n0.170\n0.0\n17.99\n47.85\n1.528\n358.8\n87470.02\n\n\n2018-12-31 23:50:00\n0.003\n0.0\n17.75\n49.65\n0.598\n322.3\n87467.29\n\n\n\n\n52560 rows × 7 columns\n\n\n\n\na = importa_clima(\"../../data/Temixco_2018_10Min_.csv\")\n\nEl archivo o ruta es incorrecto\n../../data/Temixco_2018_10Min_.csv\n\n\n\na",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>try-except</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/009_decoradores.html",
    "href": "notebooks/semanaUno/009_decoradores.html",
    "title": "10  Decoradores",
    "section": "",
    "text": "import pandas as pd\n\ndef funcion_decorador(funcion_original):\n    def wrapper(*args, **kargs):\n        # antes de la funcion\n        resultado = funcion_original(*args, **kargs)\n        # despu'es de la funci'on\n        return resultado\n    return wrapper\n\ndef imprimir_antes_despues(func):\n    def wrapper(*args, **kwargs):\n        print(\"Antes de la función.\")\n        resultado = func(*args, **kwargs)  # Ejecuta la función original\n        print(\"Después de la función.\")\n        return resultado\n    return wrapper\n\n\n@imprimir_antes_despues\ndef hola_mundo(palabra):\n    print(f\"Hola mundo {palabra}\")\n\nhola_mundo('cruel')\n\nAntes de la función.\nHola mundo cruel\nDespués de la función.\n\n\n\ndef agregar_promedio_diario_to(func):\n    \"\"\"Decorador que agrega una columna de promedio diario para la columna 'To'.\"\"\"\n    def wrapper(file_path):\n        # Llama a la función original para obtener el DataFrame\n        df = func(file_path)\n        df['To_daily_mean'] = df['To'].resample('D').mean()\n        return df\n    return wrapper\n\n\n# @agregar_promedio_diario_to\ndef importa_clima(file_path):\n    \"\"\"Importa un archivo CSV y pone la columna 0 como índice, regresa un dataframe vacio si la ruta es incorrecta\"\"\"\n    try:\n        df = pd.read_csv(file_path,index_col=0,parse_dates=True)    \n    except:\n        print(\"El archivo o ruta es incorrecto\")\n        print(file_path)\n        df = None\n    finally:\n        return df\n\n\ntmx = importa_clima(\"../../data/Temixco_2018_10Min.csv\")\ntmx\n\n\n\n\n\n\n\n\nIb\nIg\nTo\nRH\nWS\nWD\nP\n\n\ntime\n\n\n\n\n\n\n\n\n\n\n\n2018-01-01 00:00:00\nNaN\nNaN\n18.70\n36.34\n1.422\n316.0\n87864.11\n\n\n2018-01-01 00:10:00\n0.002\n0.0\n18.95\n35.29\n1.008\n283.7\n87876.37\n\n\n2018-01-01 00:20:00\n0.170\n0.0\n18.94\n35.43\n1.565\n326.0\n87888.64\n\n\n2018-01-01 00:30:00\n0.371\n0.0\n18.77\n35.89\n2.175\n354.5\n87887.21\n\n\n2018-01-01 00:40:00\n0.305\n0.0\n18.81\n36.34\n1.902\n348.0\n87886.91\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2018-12-31 23:10:00\n0.125\n0.0\n18.51\n47.29\n1.715\n332.2\n87484.32\n\n\n2018-12-31 23:20:00\n0.000\n0.0\n18.26\n48.02\n1.703\n320.5\n87470.70\n\n\n2018-12-31 23:30:00\n0.044\n0.0\n18.39\n46.84\n2.887\n335.7\n87455.03\n\n\n2018-12-31 23:40:00\n0.170\n0.0\n17.99\n47.85\n1.528\n358.8\n87470.02\n\n\n2018-12-31 23:50:00\n0.003\n0.0\n17.75\n49.65\n0.598\n322.3\n87467.29\n\n\n\n\n52560 rows × 7 columns\n\n\n\n\ntmx.To.plot()\n# tmx.To_daily_mean.dropna().plot()",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Decoradores</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/010_unpack.html",
    "href": "notebooks/semanaUno/010_unpack.html",
    "title": "11  Desempaca listas",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef suma_tres(a,b,c):\n    return a + b + c\n\n\nsuma_tres(1,1,1)\n\n3\n\n\n\nnumeros = [1, 1, 1]\n\n\nsuma_tres(numeros)\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 suma_tres(numeros)\n\nTypeError: suma_tres() missing 2 required positional arguments: 'b' and 'c'\n\n\n\n\nsuma_tres(*numeros)\n\n3\n\n\n\nprint(numeros)\n\n[1, 1, 1]\n\n\n\nprint(*numeros)\n\n1 1 1\n\n\n\n\nf = \"../../data/personas_cargas.csv\"\nhorario = pd.read_csv(f,index_col=0,parse_dates=True)\nhorario\n\n\n\n\n\n\n\n\nBATH_2_LIGHT:Lights Electricity Rate (W)\nBATH_LIGHT:Lights Electricity Rate (W)\nCOCINA_ESTUFA_EQUIPMENT:Electric Equipment Electricity Rate (W)\nCOCINA_REFR_EQUIPMENT:Electric Equipment Electricity Rate (W)\nESTANCIA_COCINA_LIGHT:Lights Electricity Rate (W)\nESTANCIA_TV_EQUIPMENT:Electric Equipment Electricity Rate (W)\nR_1_LIGHT:Lights Electricity Rate (W)\nR_2_LIGHT:Lights Electricity Rate (W)\nR_3_LIGHT:Lights Electricity Rate (W)\nSTAND_BY_EQUIPMENT:Electric Equipment Electricity Rate (W)\nB1:Space People Occupant Count ()\nB2:Space People Occupant Count ()\nCOCINA:Space People Occupant Count ()\nR1:Space People Occupant Count ()\nR2:Space People Occupant Count ()\nR3:Space People Occupant Count ()\n\n\ndate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2006-01-01 00:01:00\n0.0\n0.0\n0.0\n40.0\n0.0\n0.0\n0.0\n0.0\n0.0\n50.0\n0.0\n0.0\n0.0\n1.0\n2.0\n1.0\n\n\n2006-01-01 00:02:00\n0.0\n0.0\n0.0\n40.0\n0.0\n0.0\n0.0\n0.0\n0.0\n50.0\n0.0\n0.0\n0.0\n1.0\n2.0\n1.0\n\n\n2006-01-01 00:03:00\n0.0\n0.0\n0.0\n40.0\n0.0\n0.0\n0.0\n0.0\n0.0\n50.0\n0.0\n0.0\n0.0\n1.0\n2.0\n1.0\n\n\n2006-01-01 00:04:00\n0.0\n0.0\n0.0\n40.0\n0.0\n0.0\n0.0\n0.0\n0.0\n50.0\n0.0\n0.0\n0.0\n1.0\n2.0\n1.0\n\n\n2006-01-01 00:05:00\n0.0\n0.0\n0.0\n40.0\n0.0\n0.0\n0.0\n0.0\n0.0\n50.0\n0.0\n0.0\n0.0\n1.0\n2.0\n1.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2006-01-01 23:55:00\n0.0\n0.0\n0.0\n40.0\n0.0\n0.0\n0.0\n0.0\n0.0\n50.0\n0.0\n0.0\n0.0\n1.0\n2.0\n1.0\n\n\n2006-01-01 23:56:00\n0.0\n0.0\n0.0\n40.0\n0.0\n0.0\n0.0\n0.0\n0.0\n50.0\n0.0\n0.0\n0.0\n1.0\n2.0\n1.0\n\n\n2006-01-01 23:57:00\n0.0\n0.0\n0.0\n40.0\n0.0\n0.0\n0.0\n0.0\n0.0\n50.0\n0.0\n0.0\n0.0\n1.0\n2.0\n1.0\n\n\n2006-01-01 23:58:00\n0.0\n0.0\n0.0\n40.0\n0.0\n0.0\n0.0\n0.0\n0.0\n50.0\n0.0\n0.0\n0.0\n1.0\n2.0\n1.0\n\n\n2006-01-01 23:59:00\n0.0\n0.0\n0.0\n40.0\n0.0\n0.0\n0.0\n0.0\n0.0\n50.0\n0.0\n0.0\n0.0\n1.0\n2.0\n1.0\n\n\n\n\n1439 rows × 16 columns\n\n\n\n\npeople = [columna for columna in horario.columns if \"People\" in columna]\nelectricos = [columna for columna in horario.columns if \"(W)\" in columna]\n\npeople,electricos\n\n(['B1:Space People Occupant Count ()',\n  'B2:Space People Occupant Count ()',\n  'COCINA:Space People Occupant Count ()',\n  'R1:Space People Occupant Count ()',\n  'R2:Space People Occupant Count ()',\n  'R3:Space People Occupant Count ()'],\n ['BATH_2_LIGHT:Lights Electricity Rate (W)',\n  'BATH_LIGHT:Lights Electricity Rate (W)',\n  'COCINA_ESTUFA_EQUIPMENT:Electric Equipment Electricity Rate (W)',\n  'COCINA_REFR_EQUIPMENT:Electric Equipment Electricity Rate (W)',\n  'ESTANCIA_COCINA_LIGHT:Lights Electricity Rate (W)',\n  'ESTANCIA_TV_EQUIPMENT:Electric Equipment Electricity Rate (W)',\n  'R_1_LIGHT:Lights Electricity Rate (W)',\n  'R_2_LIGHT:Lights Electricity Rate (W)',\n  'R_3_LIGHT:Lights Electricity Rate (W)',\n  'STAND_BY_EQUIPMENT:Electric Equipment Electricity Rate (W)'])\n\n\n\nhorario[electricos].dtypes\n\nBATH_2_LIGHT:Lights Electricity Rate (W)                           float64\nBATH_LIGHT:Lights Electricity Rate (W)                             float64\nCOCINA_ESTUFA_EQUIPMENT:Electric Equipment Electricity Rate (W)    float64\nCOCINA_REFR_EQUIPMENT:Electric Equipment Electricity Rate (W)      float64\nESTANCIA_COCINA_LIGHT:Lights Electricity Rate (W)                  float64\nESTANCIA_TV_EQUIPMENT:Electric Equipment Electricity Rate (W)      float64\nR_1_LIGHT:Lights Electricity Rate (W)                              float64\nR_2_LIGHT:Lights Electricity Rate (W)                              float64\nR_3_LIGHT:Lights Electricity Rate (W)                              float64\nSTAND_BY_EQUIPMENT:Electric Equipment Electricity Rate (W)         float64\ndtype: object\n\n\n\nfig, ax = plt.subplots(figsize=(12,6))\n\nax.stackplot(horario.index,\n             horario[electricos[0]],\n             horario[electricos[1]],\n             horario[electricos[2]],\n             horario[electricos[3]],\n             horario[electricos[4]],\n             horario[electricos[5]],\n             horario[electricos[6]],\n             horario[electricos[7]],\n             horario[electricos[8]],\n             horario[electricos[9]],\n#              data[electricos[8]],\n             labels=electricos\n            )\n\n\nax.legend(loc=\"upper left\",\n#           ncols=6,\n          fontsize=6)\nax.grid()\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(12,6))\n\nax.stackplot(horario.index,horario[electricos],labels=electricos)\n\nax.legend()\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[7], line 3\n      1 fig, ax = plt.subplots(figsize=(12,6))\n----&gt; 3 ax.stackplot(horario.index,horario[electricos],labels=electricos)\n      5 ax.legend()\n\nFile ~\\venv\\alldays\\Lib\\site-packages\\matplotlib\\__init__.py:1486, in _preprocess_data.&lt;locals&gt;.inner(ax, data, *args, **kwargs)\n   1483 @functools.wraps(func)\n   1484 def inner(ax, *args, data=None, **kwargs):\n   1485     if data is None:\n-&gt; 1486         return func(\n   1487             ax,\n   1488             *map(sanitize_sequence, args),\n   1489             **{k: sanitize_sequence(v) for k, v in kwargs.items()})\n   1491     bound = new_sig.bind(ax, *args, **kwargs)\n   1492     auto_label = (bound.arguments.get(label_namer)\n   1493                   or bound.kwargs.get(label_namer))\n\nFile ~\\venv\\alldays\\Lib\\site-packages\\matplotlib\\stackplot.py:129, in stackplot(axes, x, labels, colors, hatch, baseline, *args, **kwargs)\n    126     stack += first_line\n    128 # Color between x = 0 and the first array.\n--&gt; 129 coll = axes.fill_between(x, first_line, stack[0, :],\n    130                          facecolor=next(colors),\n    131                          hatch=next(hatch),\n    132                          label=next(labels, None),\n    133                          **kwargs)\n    134 coll.sticky_edges.y[:] = [0]\n    135 r = [coll]\n\nFile ~\\venv\\alldays\\Lib\\site-packages\\matplotlib\\__init__.py:1486, in _preprocess_data.&lt;locals&gt;.inner(ax, data, *args, **kwargs)\n   1483 @functools.wraps(func)\n   1484 def inner(ax, *args, data=None, **kwargs):\n   1485     if data is None:\n-&gt; 1486         return func(\n   1487             ax,\n   1488             *map(sanitize_sequence, args),\n   1489             **{k: sanitize_sequence(v) for k, v in kwargs.items()})\n   1491     bound = new_sig.bind(ax, *args, **kwargs)\n   1492     auto_label = (bound.arguments.get(label_namer)\n   1493                   or bound.kwargs.get(label_namer))\n\nFile ~\\venv\\alldays\\Lib\\site-packages\\matplotlib\\axes\\_axes.py:5648, in Axes.fill_between(self, x, y1, y2, where, interpolate, step, **kwargs)\n   5646 def fill_between(self, x, y1, y2=0, where=None, interpolate=False,\n   5647                  step=None, **kwargs):\n-&gt; 5648     return self._fill_between_x_or_y(\n   5649         \"x\", x, y1, y2,\n   5650         where=where, interpolate=interpolate, step=step, **kwargs)\n\nFile ~\\venv\\alldays\\Lib\\site-packages\\matplotlib\\axes\\_axes.py:5564, in Axes._fill_between_x_or_y(self, ind_dir, ind, dep1, dep2, where, interpolate, step, **kwargs)\n   5561     if where.size != ind.size:\n   5562         raise ValueError(f\"where size ({where.size}) does not match \"\n   5563                          f\"{ind_dir} size ({ind.size})\")\n-&gt; 5564 where = where & ~functools.reduce(\n   5565     np.logical_or, map(np.ma.getmaskarray, [ind, dep1, dep2]))\n   5567 ind, dep1, dep2 = np.broadcast_arrays(\n   5568     np.atleast_1d(ind), dep1, dep2, subok=True)\n   5570 polys = []\n\nValueError: operands could not be broadcast together with shapes (1439,) (10,) \n\n\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(12,6))\n\nax.stackplot(horario.index,*[horario[electrico] for electrico in electricos],labels=electricos)\n\nax.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n# En las nuevas versiones de matplotlib podemos no desempacar\nfig, ax = plt.subplots(figsize=(12,6))\n\nax.stackplot(horario.index,[horario[electrico] for electrico in electricos],labels=electricos)\n\nax.legend()\n\n\n\n\n\n\n\n\n\nprint(*[columna for columna in horario.columns])\n\nBATH_2_LIGHT:Lights Electricity Rate (W) BATH_LIGHT:Lights Electricity Rate (W) COCINA_ESTUFA_EQUIPMENT:Electric Equipment Electricity Rate (W) COCINA_REFR_EQUIPMENT:Electric Equipment Electricity Rate (W) ESTANCIA_COCINA_LIGHT:Lights Electricity Rate (W) ESTANCIA_TV_EQUIPMENT:Electric Equipment Electricity Rate (W) R_1_LIGHT:Lights Electricity Rate (W) R_2_LIGHT:Lights Electricity Rate (W) R_3_LIGHT:Lights Electricity Rate (W) STAND_BY_EQUIPMENT:Electric Equipment Electricity Rate (W) B1:Space People Occupant Count () B2:Space People Occupant Count () COCINA:Space People Occupant Count () R1:Space People Occupant Count () R2:Space People Occupant Count () R3:Space People Occupant Count ()\n\n\n\nprint([columna for columna in horario.columns])\n\n['BATH_2_LIGHT:Lights Electricity Rate (W)', 'BATH_LIGHT:Lights Electricity Rate (W)', 'COCINA_ESTUFA_EQUIPMENT:Electric Equipment Electricity Rate (W)', 'COCINA_REFR_EQUIPMENT:Electric Equipment Electricity Rate (W)', 'ESTANCIA_COCINA_LIGHT:Lights Electricity Rate (W)', 'ESTANCIA_TV_EQUIPMENT:Electric Equipment Electricity Rate (W)', 'R_1_LIGHT:Lights Electricity Rate (W)', 'R_2_LIGHT:Lights Electricity Rate (W)', 'R_3_LIGHT:Lights Electricity Rate (W)', 'STAND_BY_EQUIPMENT:Electric Equipment Electricity Rate (W)', 'B1:Space People Occupant Count ()', 'B2:Space People Occupant Count ()', 'COCINA:Space People Occupant Count ()', 'R1:Space People Occupant Count ()', 'R2:Space People Occupant Count ()', 'R3:Space People Occupant Count ()']",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Desempaca listas</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/011_lambda.html",
    "href": "notebooks/semanaUno/011_lambda.html",
    "title": "12  Funciones lambda",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\nf = \"../../data/Temixco_2018_10Min.csv\"\ntmx = pd.read_csv(f,parse_dates=[\"time\"])\ntmx.time\n\n0       2018-01-01 00:00:00\n1       2018-01-01 00:10:00\n2       2018-01-01 00:20:00\n3       2018-01-01 00:30:00\n4       2018-01-01 00:40:00\n                ...        \n52555   2018-12-31 23:10:00\n52556   2018-12-31 23:20:00\n52557   2018-12-31 23:30:00\n52558   2018-12-31 23:40:00\n52559   2018-12-31 23:50:00\nName: time, Length: 52560, dtype: datetime64[ns]\n\n\n\ntmx[\"time\"].apply(lambda x: x.year)\n\n0        2018\n1        2018\n2        2018\n3        2018\n4        2018\n         ... \n52555    2018\n52556    2018\n52557    2018\n52558    2018\n52559    2018\nName: time, Length: 52560, dtype: int64\n\n\n\ntmx[\"year\"] = tmx[\"time\"].apply(lambda x: x.year)\ntmx.columns\n\nIndex(['time', 'Ib', 'Ig', 'To', 'RH', 'WS', 'WD', 'P', 'year'], dtype='object')\n\n\n\n%%timeit\ntmx[\"P\"].apply(lambda x: x*100)\n\n23.1 ms ± 6.48 ms per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\n\n\n%%timeit\ntmx[\"P\"]*100\n\n101 μs ± 17.6 μs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n\n\n\ntmx['mensaje'] = tmx['To'].apply(lambda x: 'confort' if 20 &lt;= x &lt;= 24 else ('calor' if x &gt; 24 else 'frío'))\n\n\ntmx.mensaje\n\n0        frío\n1        frío\n2        frío\n3        frío\n4        frío\n         ... \n52555    frío\n52556    frío\n52557    frío\n52558    frío\n52559    frío\nName: mensaje, Length: 52560, dtype: object\n\n\n\ntmx.mensaje.value_counts()\n\nmensaje\ncalor      20907\nconfort    15921\nfrío       15732\nName: count, dtype: int64",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Funciones lambda</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/012_walrus.html",
    "href": "notebooks/semanaUno/012_walrus.html",
    "title": "13  Operador Walrus",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\nfunciones = [\"pd.read_csv\", \"pd.concat\", \"pd.read_excel\", \"pd.read_parquet\"]\n# Supongamos que queremos filtrar solo los que tienen más de 11 letras \nresultados = []\nfor funcion in funciones:\n    largo = len(funcion)\n    if largo &gt; 11:\n        resultados.append(funcion)\nprint(resultados)\n\n['pd.read_excel', 'pd.read_parquet']\n\n\nCon el operador walrus\n\nfunciones = [\"pd.read_csv\", \"pd.concat\", \"pd.read_excel\", \"pd.read_parquet\"]\nresultados = []\nfor funcion in funciones:\n    if (largo := len(funcion)) &gt; 11:\n        resultados.append(funcion)\nprint(resultados)\n\n['pd.read_excel', 'pd.read_parquet']\n\n\n\n\n# Calcular el valor de una función y luego usarlo para alguna condición\nvalor =16**2\nif valor &gt; 3:\n    print(f\"El valor es mayor que 3 y es {valor}\")\n\nEl valor es mayor que 3 y es 256\n\n\n\n# Calcular el valor de una función y evaluarlo en la misma expresión\nif (valor := 16**2) &gt; 3:\n    print(f\"El valor es mayor que 3 y es {valor}\")\n\nEl valor es mayor que 3 y es 256\n\n\n\nf = \"../../data/Temixco_2018_10Min.csv\"\ntmx = pd.read_csv(f,parse_dates=[\"time\"])\ntmx.time\n\n0       2018-01-01 00:00:00\n1       2018-01-01 00:10:00\n2       2018-01-01 00:20:00\n3       2018-01-01 00:30:00\n4       2018-01-01 00:40:00\n                ...        \n52555   2018-12-31 23:10:00\n52556   2018-12-31 23:20:00\n52557   2018-12-31 23:30:00\n52558   2018-12-31 23:40:00\n52559   2018-12-31 23:50:00\nName: time, Length: 52560, dtype: datetime64[ns]\n\n\n\ntmx[\"time\"].apply(lambda x: x.year)\n\n0        2018\n1        2018\n2        2018\n3        2018\n4        2018\n         ... \n52555    2018\n52556    2018\n52557    2018\n52558    2018\n52559    2018\nName: time, Length: 52560, dtype: int64\n\n\n\ntmx[\"year\"] = tmx[\"time\"].apply(lambda x: x.year)\ntmx.columns\n\nIndex(['time', 'Ib', 'Ig', 'To', 'RH', 'WS', 'WD', 'P', 'year'], dtype='object')\n\n\n\n%%timeit\ntmx[\"P\"].apply(lambda x: x*100)\n\n19 ms ± 4.57 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\n\n\n%%timeit\ntmx[\"P\"]*100\n\n107 μs ± 8.46 μs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n\n\n\ntmx['mensaje'] = tmx['To'].apply(lambda x: 'confort' if 20 &lt;= x &lt;= 24 else ('calor' if x &gt; 24 else 'frío'))\n\n\ntmx.mensaje\n\n0        frío\n1        frío\n2        frío\n3        frío\n4        frío\n         ... \n52555    frío\n52556    frío\n52557    frío\n52558    frío\n52559    frío\nName: mensaje, Length: 52560, dtype: object\n\n\n\ntmx.mensaje.value_counts()\n\nmensaje\ncalor      20907\nconfort    15921\nfrío       15732\nName: count, dtype: int64",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Operador Walrus</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaDos/013_IntroMatplotlib.html",
    "href": "notebooks/semanaDos/013_IntroMatplotlib.html",
    "title": "14  Intro rápida a Matplotlib",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom dateutil.parser import parse\n\n\nf = '../../data/Temixco_2018_10Min.csv'\ntmx = pd.read_csv(f,index_col=0,parse_dates=True)\ntmx.columns\n\nIndex(['Ib', 'Ig', 'To', 'RH', 'WS', 'WD', 'P'], dtype='object')\n\n\n\nfig, ax = plt.subplots(figsize=(12,4),sharex=True)\n\n# fecha1 = parse('2018-03-10')\n# fecha2 = fecha1 + pd.Timedelta('3D')\n\nax.plot(tmx['Ig'],label='Ig')\nax.plot(tmx['Ib'],label='Ib')\n\nax.legend()\n# ax.set_xlim(fecha1,fecha2)\n\n\n\n\n\n\n\n\n\nf = '../../data/personas_cargas.csv'\ncargas = pd.read_csv(f,index_col=0,parse_dates=True)\ncolumnas = cargas.columns\ncolumnas\n\nIndex(['BATH_2_LIGHT:Lights Electricity Rate (W)',\n       'BATH_LIGHT:Lights Electricity Rate (W)',\n       'COCINA_ESTUFA_EQUIPMENT:Electric Equipment Electricity Rate (W)',\n       'COCINA_REFR_EQUIPMENT:Electric Equipment Electricity Rate (W)',\n       'ESTANCIA_COCINA_LIGHT:Lights Electricity Rate (W)',\n       'ESTANCIA_TV_EQUIPMENT:Electric Equipment Electricity Rate (W)',\n       'R_1_LIGHT:Lights Electricity Rate (W)',\n       'R_2_LIGHT:Lights Electricity Rate (W)',\n       'R_3_LIGHT:Lights Electricity Rate (W)',\n       'STAND_BY_EQUIPMENT:Electric Equipment Electricity Rate (W)',\n       'B1:Space People Occupant Count ()',\n       'B2:Space People Occupant Count ()',\n       'COCINA:Space People Occupant Count ()',\n       'R1:Space People Occupant Count ()',\n       'R2:Space People Occupant Count ()',\n       'R3:Space People Occupant Count ()'],\n      dtype='object')\n\n\n\netiquetas = [columna for columna in columnas if 'People' in columna]\netiquetas\n\n['B1:Space People Occupant Count ()',\n 'B2:Space People Occupant Count ()',\n 'COCINA:Space People Occupant Count ()',\n 'R1:Space People Occupant Count ()',\n 'R2:Space People Occupant Count ()',\n 'R3:Space People Occupant Count ()']\n\n\n\nfig, ax = plt.subplots(figsize=(12,4))\n\nax.stackplot(cargas.index,[cargas[columna] for columna in columnas if 'People' in columna],labels= etiquetas)\n\nax.legend();",
    "crumbs": [
      "Semana Dos",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Intro rápida a Matplotlib</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaDos/014_POOMatplotlib.html",
    "href": "notebooks/semanaDos/014_POOMatplotlib.html",
    "title": "15  POO en Matplotlib",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom dateutil.parser import parse\n\n\nf = '../../data/Temixco_2018_10Min.csv'\ntmx = pd.read_csv(f,index_col=0,parse_dates=True)\ncolumnas = tmx.columns\ncolumnas\n\nIndex(['Ib', 'Ig', 'To', 'RH', 'WS', 'WD', 'P'], dtype='object')\n\n\n\nfig, ax = plt.subplots(2,figsize=(12,4),sharex=True)\n\nfecha1 = parse(\"2018-03-10\")\nfecha2 = fecha1 + pd.Timedelta(\"7D\")\n\nfor columna in columnas[:2]:\n    ax[0].plot(tmx[columna],label=columna)\n\nax[1].plot(tmx.To,label=\"To\")\n    \nfor eje in ax:\n    eje.set_xlim(fecha1,fecha2)\n    eje.legend()\n    eje.grid()\n\nax[0].set_ylim(0,1200)\nax[1].set_ylim(18,35)\n\n\n\n\n\n\n\n\n\nf = '../../data/personas_cargas.csv'\ncargas = pd.read_csv(f,index_col=0,parse_dates=True)\ncargas.columns\n\nIndex(['B2_LIGHT:Lights Electricity Rate (W)',\n       'B1:Lights Electricity Rate (W)',\n       'COCINA_ESTUFA_EQUIPMENT:Electric Equipment Electricity Rate (W)',\n       'COCINA_REFR_EQUIPMENT:Electric Equipment Electricity Rate (W)',\n       'ESTANCIA_COCINA_LIGHT:Lights Electricity Rate (W)',\n       'ESTANCIA_TV_EQUIPMENT:Electric Equipment Electricity Rate (W)',\n       'R1_LIGHT:Lights Electricity Rate (W)',\n       'R2_LIGHT:Lights Electricity Rate (W)',\n       'R3_LIGHT:Lights Electricity Rate (W)',\n       'COCINA_STAND_BY_EQUIPMENT:Electric Equipment Electricity Rate (W)',\n       'B1:Space People Occupant Count ()',\n       'B2:Space People Occupant Count ()',\n       'COCINA:Space People Occupant Count ()',\n       'R1:Space People Occupant Count ()',\n       'R2:Space People Occupant Count ()',\n       'R3:Space People Occupant Count ()'],\n      dtype='object')\n\n\n\nwatts = [columna for columna in cargas.columns if '(W)'  in columna]\npersonas = [columna for columna in cargas.columns if 'People'  in columna]\nwatts, personas\n\n(['B2_LIGHT:Lights Electricity Rate (W)',\n  'B1:Lights Electricity Rate (W)',\n  'COCINA_ESTUFA_EQUIPMENT:Electric Equipment Electricity Rate (W)',\n  'COCINA_REFR_EQUIPMENT:Electric Equipment Electricity Rate (W)',\n  'ESTANCIA_COCINA_LIGHT:Lights Electricity Rate (W)',\n  'ESTANCIA_TV_EQUIPMENT:Electric Equipment Electricity Rate (W)',\n  'R1_LIGHT:Lights Electricity Rate (W)',\n  'R2_LIGHT:Lights Electricity Rate (W)',\n  'R3_LIGHT:Lights Electricity Rate (W)',\n  'COCINA_STAND_BY_EQUIPMENT:Electric Equipment Electricity Rate (W)'],\n ['B1:Space People Occupant Count ()',\n  'B2:Space People Occupant Count ()',\n  'COCINA:Space People Occupant Count ()',\n  'R1:Space People Occupant Count ()',\n  'R2:Space People Occupant Count ()',\n  'R3:Space People Occupant Count ()'])\n\n\n\nfig, ax = plt.subplots(2,figsize=(12,4),sharex=True)\n\nax[0].stackplot(cargas.index,*[cargas[watt] for watt in watts],labels= watts)\nax[1].stackplot(cargas.index,*[cargas[persona] for persona in personas],labels= personas)\n\nfor eje in ax:\n    eje.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(2,figsize=(12,4),sharex=True)\n\nax[0].stackplot(cargas.index,*[cargas[watt] for watt in watts],labels= watts)\nax[1].stackplot(cargas.index,*[cargas[persona] for persona in personas],labels= personas)\n\nhandles, labels_cargas = ax[0].get_legend_handles_labels()\nlabels_cargas = [etiqueta.split(\":\")[0] for etiqueta in labels_cargas]\nax[0].legend(handles, labels_cargas,ncol=2)\nax[1].legend()\n\nax[0].set_ylabel(\"Watts\")\nax[1].set_ylabel(\"Personas\")\nplt.show()",
    "crumbs": [
      "Semana Dos",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>POO en Matplotlib</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaDos/015_DecoradoresMatplotlib.html",
    "href": "notebooks/semanaDos/015_DecoradoresMatplotlib.html",
    "title": "16  Decoradores en Matplotlib",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom dateutil.parser import parse\n\n\nf = '../../data/Temixco_2018_10Min.csv'\ntmx = pd.read_csv(f,index_col=0,parse_dates=True)\ntmx.columns\n\nIndex(['Ib', 'Ig', 'To', 'RH', 'WS', 'WD', 'P'], dtype='object')\n\n\n\ndef agrega_promedio_std(funcion):\n    def wrapper(tmx, columna):\n        fig, ax = funcion(tmx, columna)\n        daily_mas = tmx[columna].resample(\"D\").mean() + tmx[columna].resample(\"D\").std()\n        daily_menos = tmx[columna].resample(\"D\").mean() - tmx[columna].resample(\"D\").std()\n        \n        ax.fill_between(\n            daily_mas.index, \n            daily_mas,\n            daily_menos,\n            alpha=0.65,\n            color=\"orange\",\n            zorder=2\n        )\n        plt.show()\n        return fig, ax\n    return wrapper\n        \n        \n@agrega_promedio_std\ndef grafica_columna(tmx,columna):\n    fig, ax = plt.subplots(figsize=(12,4),sharex=True)\n    \n    ax.plot(tmx[columna],label=columna)\n    \n    ax.legend()\n    return fig, ax\n\ngrafica_columna(tmx,\"To\")",
    "crumbs": [
      "Semana Dos",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Decoradores en Matplotlib</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaDos/016_TemasMatplotlib.html",
    "href": "notebooks/semanaDos/016_TemasMatplotlib.html",
    "title": "17  Temas en Matplotlib",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom dateutil.parser import parse\n\n# plt.style.use(\"grayscale\")\n# plt.style.use(\"seaborn-v0_8-talk\")\nplt.style.use(\"seaborn-v0_8-dark\")\n# plt.style.use(\"enerdata_square.mplstyle\")\n\n\n\nplt.style.available\n\n['Solarize_Light2',\n '_classic_test_patch',\n '_mpl-gallery',\n '_mpl-gallery-nogrid',\n 'bmh',\n 'classic',\n 'dark_background',\n 'fast',\n 'fivethirtyeight',\n 'ggplot',\n 'grayscale',\n 'seaborn-v0_8',\n 'seaborn-v0_8-bright',\n 'seaborn-v0_8-colorblind',\n 'seaborn-v0_8-dark',\n 'seaborn-v0_8-dark-palette',\n 'seaborn-v0_8-darkgrid',\n 'seaborn-v0_8-deep',\n 'seaborn-v0_8-muted',\n 'seaborn-v0_8-notebook',\n 'seaborn-v0_8-paper',\n 'seaborn-v0_8-pastel',\n 'seaborn-v0_8-poster',\n 'seaborn-v0_8-talk',\n 'seaborn-v0_8-ticks',\n 'seaborn-v0_8-white',\n 'seaborn-v0_8-whitegrid',\n 'tableau-colorblind10']\n\n\n\nf = '../data/Temixco_2018_10Min.csv'\ntmx = pd.read_csv(f,index_col=0,parse_dates=True)\ncolumnas = tmx.columns\ncolumnas\n\nIndex(['Ib', 'Ig', 'To', 'RH', 'WS', 'WD', 'P'], dtype='object')\n\n\n\nfig, ax = plt.subplots(2,figsize=(12,4),sharex=True)\n\nfecha1 = parse(\"2018-03-10\")\nfecha2 = fecha1 + pd.Timedelta(\"7D\")\n\nfor columna in columnas[:2]:\n    ax[0].plot(tmx[columna],label=columna)\n\nax[1].plot(tmx.To,label=\"To\")\n    \nfor eje in ax:\n    eje.set_xlim(fecha1,fecha2)\n    eje.legend()\n    eje.grid()\n\nax[0].set_ylim(0,1200)\nax[1].set_ylim(18,35)\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots()\n\nfecha1 = parse(\"2018-03-10\")\nfecha2 = fecha1 + pd.Timedelta(\"1D\")\n\nfor columna in columnas[:2]:\n    ax.plot(tmx[columna],label=columna)\n\nax.set_xlim(fecha1,fecha2)\n\nax.set_ylim(0,1200)",
    "crumbs": [
      "Semana Dos",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Temas en Matplotlib</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaDos/017_InteractivasMatplotlib.html",
    "href": "notebooks/semanaDos/017_InteractivasMatplotlib.html",
    "title": "18  Interactividad en Matplotlib",
    "section": "",
    "text": "# pip install ipympl\n\n\n%matplotlib widget\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom dateutil.parser import parse\n\n\nf = '../data/Temixco_2018_10Min.csv'\ntmx = pd.read_csv(f,index_col=0,parse_dates=True)\ncolumnas = tmx.columns\ncolumnas\n\nIndex(['Ib', 'Ig', 'To', 'RH', 'WS', 'WD', 'P'], dtype='object')\n\n\n\nfig, ax = plt.subplots()\n\n\nfor columna in columnas[:2]:\n    ax.plot(tmx[columna],label=columna)\n\n\nax.set_ylim(0,1200)\n\n(0.0, 1200.0)\n\n\n\n\n\n\nfig, ax = plt.subplots(2,sharex=True)\n\nfor columna in columnas[:2]:\n    ax[0].plot(tmx[columna],label=columna)\n\nax[1].plot(tmx.To,label=\"To\")\n    \nfor eje in ax:\n    eje.legend()\n    eje.grid()\n\n\nplt.show()",
    "crumbs": [
      "Semana Dos",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Interactividad en Matplotlib</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaDos/018_EstructuraDatos_OWD.html",
    "href": "notebooks/semanaDos/018_EstructuraDatos_OWD.html",
    "title": "19  Estructura de datos de Our World in Data",
    "section": "",
    "text": "@article{owid-co2-gdp-decoupling, author = {Hannah Ritchie}, title = {Many countries have decoupled economic growth from CO2 emissions, even if we take offshored production into account}, journal = {Our World in Data}, year = {2021}, note = {https://ourworldindata.org/co2-gdp-decoupling} }\nDatos de: https://github.com/owid/co2-data?tab=readme-ov-file\nIreland es uno de los países que han disminuido las emisiones de CO2 per capita. Vamos a compararla con México.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\nf = \"../data/owid-co2-data.csv\"\nco2 = pd.read_csv(f)\nco2.columns\n\nIndex(['country', 'year', 'iso_code', 'population', 'gdp', 'cement_co2',\n       'cement_co2_per_capita', 'co2', 'co2_growth_abs', 'co2_growth_prct',\n       'co2_including_luc', 'co2_including_luc_growth_abs',\n       'co2_including_luc_growth_prct', 'co2_including_luc_per_capita',\n       'co2_including_luc_per_gdp', 'co2_including_luc_per_unit_energy',\n       'co2_per_capita', 'co2_per_gdp', 'co2_per_unit_energy', 'coal_co2',\n       'coal_co2_per_capita', 'consumption_co2', 'consumption_co2_per_capita',\n       'consumption_co2_per_gdp', 'cumulative_cement_co2', 'cumulative_co2',\n       'cumulative_co2_including_luc', 'cumulative_coal_co2',\n       'cumulative_flaring_co2', 'cumulative_gas_co2', 'cumulative_luc_co2',\n       'cumulative_oil_co2', 'cumulative_other_co2', 'energy_per_capita',\n       'energy_per_gdp', 'flaring_co2', 'flaring_co2_per_capita', 'gas_co2',\n       'gas_co2_per_capita', 'ghg_excluding_lucf_per_capita', 'ghg_per_capita',\n       'land_use_change_co2', 'land_use_change_co2_per_capita', 'methane',\n       'methane_per_capita', 'nitrous_oxide', 'nitrous_oxide_per_capita',\n       'oil_co2', 'oil_co2_per_capita', 'other_co2_per_capita',\n       'other_industry_co2', 'primary_energy_consumption',\n       'share_global_cement_co2', 'share_global_co2',\n       'share_global_co2_including_luc', 'share_global_coal_co2',\n       'share_global_cumulative_cement_co2', 'share_global_cumulative_co2',\n       'share_global_cumulative_co2_including_luc',\n       'share_global_cumulative_coal_co2',\n       'share_global_cumulative_flaring_co2',\n       'share_global_cumulative_gas_co2', 'share_global_cumulative_luc_co2',\n       'share_global_cumulative_oil_co2', 'share_global_cumulative_other_co2',\n       'share_global_flaring_co2', 'share_global_gas_co2',\n       'share_global_luc_co2', 'share_global_oil_co2',\n       'share_global_other_co2', 'share_of_temperature_change_from_ghg',\n       'temperature_change_from_ch4', 'temperature_change_from_co2',\n       'temperature_change_from_ghg', 'temperature_change_from_n2o',\n       'total_ghg', 'total_ghg_excluding_lucf', 'trade_co2',\n       'trade_co2_share'],\n      dtype='object')\n\n\n\nco2.country.unique()\n\narray(['Afghanistan', 'Africa', 'Africa (GCP)', 'Albania', 'Algeria',\n       'Andorra', 'Angola', 'Anguilla', 'Antarctica',\n       'Antigua and Barbuda', 'Argentina', 'Armenia', 'Aruba', 'Asia',\n       'Asia (GCP)', 'Asia (excl. China and India)', 'Australia',\n       'Austria', 'Azerbaijan', 'Bahamas', 'Bahrain', 'Bangladesh',\n       'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bermuda',\n       'Bhutan', 'Bolivia', 'Bonaire Sint Eustatius and Saba',\n       'Bosnia and Herzegovina', 'Botswana', 'Brazil',\n       'British Virgin Islands', 'Brunei', 'Bulgaria', 'Burkina Faso',\n       'Burundi', 'Cambodia', 'Cameroon', 'Canada', 'Cape Verde',\n       'Central African Republic', 'Central America (GCP)', 'Chad',\n       'Chile', 'China', 'Christmas Island', 'Colombia', 'Comoros',\n       'Congo', 'Cook Islands', 'Costa Rica', \"Cote d'Ivoire\", 'Croatia',\n       'Cuba', 'Curacao', 'Cyprus', 'Czechia',\n       'Democratic Republic of Congo', 'Denmark', 'Djibouti', 'Dominica',\n       'Dominican Republic', 'East Timor', 'Ecuador', 'Egypt',\n       'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia',\n       'Eswatini', 'Ethiopia', 'Europe', 'Europe (GCP)',\n       'Europe (excl. EU-27)', 'Europe (excl. EU-28)',\n       'European Union (27)', 'European Union (28)', 'Faroe Islands',\n       'Fiji', 'Finland', 'France', 'French Polynesia', 'Gabon', 'Gambia',\n       'Georgia', 'Germany', 'Ghana', 'Greece', 'Greenland', 'Grenada',\n       'Guatemala', 'Guinea', 'Guinea-Bissau', 'Guyana', 'Haiti',\n       'High-income countries', 'Honduras', 'Hong Kong', 'Hungary',\n       'Iceland', 'India', 'Indonesia', 'International aviation',\n       'International shipping', 'International transport', 'Iran',\n       'Iraq', 'Ireland', 'Israel', 'Italy', 'Jamaica', 'Japan', 'Jordan',\n       'Kazakhstan', 'Kenya', 'Kiribati', 'Kosovo', 'Kuwait',\n       'Kuwaiti Oil Fires', 'Kuwaiti Oil Fires (GCP)', 'Kyrgyzstan',\n       'Laos', 'Latvia', 'Least developed countries (Jones et al.)',\n       'Lebanon', 'Leeward Islands', 'Leeward Islands (GCP)', 'Lesotho',\n       'Liberia', 'Libya', 'Liechtenstein', 'Lithuania',\n       'Low-income countries', 'Lower-middle-income countries',\n       'Luxembourg', 'Macao', 'Madagascar', 'Malawi', 'Malaysia',\n       'Maldives', 'Mali', 'Malta', 'Marshall Islands', 'Mauritania',\n       'Mauritius', 'Mexico', 'Micronesia (country)', 'Middle East (GCP)',\n       'Moldova', 'Monaco', 'Mongolia', 'Montenegro', 'Montserrat',\n       'Morocco', 'Mozambique', 'Myanmar', 'Namibia', 'Nauru', 'Nepal',\n       'Netherlands', 'New Caledonia', 'New Zealand', 'Nicaragua',\n       'Niger', 'Nigeria', 'Niue', 'Non-OECD (GCP)', 'North America',\n       'North America (GCP)', 'North America (excl. USA)', 'North Korea',\n       'North Macedonia', 'Norway', 'OECD (GCP)', 'OECD (Jones et al.)',\n       'Oceania', 'Oceania (GCP)', 'Oman', 'Pakistan', 'Palau',\n       'Palestine', 'Panama', 'Panama Canal Zone',\n       'Panama Canal Zone (GCP)', 'Papua New Guinea', 'Paraguay', 'Peru',\n       'Philippines', 'Poland', 'Portugal', 'Qatar', 'Romania', 'Russia',\n       'Rwanda', 'Ryukyu Islands', 'Ryukyu Islands (GCP)', 'Saint Helena',\n       'Saint Kitts and Nevis', 'Saint Lucia',\n       'Saint Pierre and Miquelon', 'Saint Vincent and the Grenadines',\n       'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia',\n       'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore',\n       'Sint Maarten (Dutch part)', 'Slovakia', 'Slovenia',\n       'Solomon Islands', 'Somalia', 'South Africa', 'South America',\n       'South America (GCP)', 'South Korea', 'South Sudan', 'Spain',\n       'Sri Lanka', 'St. Kitts-Nevis-Anguilla',\n       'St. Kitts-Nevis-Anguilla (GCP)', 'Sudan', 'Suriname', 'Sweden',\n       'Switzerland', 'Syria', 'Taiwan', 'Tajikistan', 'Tanzania',\n       'Thailand', 'Togo', 'Tonga', 'Trinidad and Tobago', 'Tunisia',\n       'Turkey', 'Turkmenistan', 'Turks and Caicos Islands', 'Tuvalu',\n       'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom',\n       'United States', 'Upper-middle-income countries', 'Uruguay',\n       'Uzbekistan', 'Vanuatu', 'Vatican', 'Venezuela', 'Vietnam',\n       'Wallis and Futuna', 'World', 'Yemen', 'Zambia', 'Zimbabwe'],\n      dtype=object)\n\n\n\nirlanda = co2.loc[co2[\"country\"] == \"Ireland\"][[\"year\",\"co2\",\"co2_per_capita\",\"population\"]]\nmexico = co2.loc[co2[\"country\"] == \"Mexico\"][[\"year\",\"co2\",\"co2_per_capita\",\"population\"]]\n\n\nfig, ax = plt.subplots(figsize=(10,4))\n\nax.plot(irlanda.year,irlanda.co2,label=\"Irlanda\")\nax.plot(mexico.year,mexico.co2,label=\"México\")\n\nax.set_ylabel(\"CO2\")\nax.legend()\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10,4))\n\nax.plot(irlanda.year,irlanda.co2_per_capita,label=\"Irlanda\")\nax.plot(mexico.year,mexico.co2_per_capita,label=\"México\")\n\nax.set_ylabel(\"CO2\")\nax.legend()",
    "crumbs": [
      "Semana Dos",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Estructura de datos de Our World in Data</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaDos/019_Intro_Plotly.html",
    "href": "notebooks/semanaDos/019_Intro_Plotly.html",
    "title": "20  Plotly",
    "section": "",
    "text": "# pip install plotly\n\n\nimport plotly.express as px\nimport pandas as pd\n\n\nf = '../data/Temixco_2018_10Min.csv'\ntmx = pd.read_csv(f)\ntmx.columns\n\nIndex(['time', 'Ib', 'Ig', 'To', 'RH', 'WS', 'WD', 'P'], dtype='object')\n\n\n\nfig = px.line(tmx, x=\"time\",y=\"Ig\")\nfig.show()\n\n                                                \n\n\n\nfig = px.line(tmx, x=\"time\",y=[\"Ig\",\"Ib\"])\nfig.show()\n\n                                                \n\n\n\nfig = px.line(tmx, x=\"time\",y=tmx.columns)\nfig.show()\n\n                                                \n\n\nNoten el tamaño del archivo final",
    "crumbs": [
      "Semana Dos",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Plotly</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaDos/020_Intro_Bokeh.html",
    "href": "notebooks/semanaDos/020_Intro_Bokeh.html",
    "title": "21  Bokeh",
    "section": "",
    "text": "# pip install bokeh\n\nCollecting bokeh\n  Downloading bokeh-3.5.1-py3-none-any.whl.metadata (12 kB)\nRequirement already satisfied: Jinja2&gt;=2.9 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from bokeh) (3.1.4)\nRequirement already satisfied: contourpy&gt;=1.2 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from bokeh) (1.2.1)\nRequirement already satisfied: numpy&gt;=1.16 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from bokeh) (1.26.4)\nRequirement already satisfied: packaging&gt;=16.8 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from bokeh) (24.0)\nRequirement already satisfied: pandas&gt;=1.2 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from bokeh) (2.2.2)\nRequirement already satisfied: pillow&gt;=7.1.0 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from bokeh) (10.3.0)\nRequirement already satisfied: PyYAML&gt;=3.10 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from bokeh) (6.0.1)\nRequirement already satisfied: tornado&gt;=6.2 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from bokeh) (6.4)\nCollecting xyzservices&gt;=2021.09.1 (from bokeh)\n  Downloading xyzservices-2024.6.0-py3-none-any.whl.metadata (4.0 kB)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from Jinja2&gt;=2.9-&gt;bokeh) (2.1.5)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from pandas&gt;=1.2-&gt;bokeh) (2.9.0.post0)\nRequirement already satisfied: pytz&gt;=2020.1 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from pandas&gt;=1.2-&gt;bokeh) (2024.1)\nRequirement already satisfied: tzdata&gt;=2022.7 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from pandas&gt;=1.2-&gt;bokeh) (2024.1)\nRequirement already satisfied: six&gt;=1.5 in /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas&gt;=1.2-&gt;bokeh) (1.16.0)\nDownloading bokeh-3.5.1-py3-none-any.whl (6.8 MB)\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 6.8/6.8 MB 530.8 kB/s eta 0:00:00m eta 0:00:01[36m0:00:01\nDownloading xyzservices-2024.6.0-py3-none-any.whl (83 kB)\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 83.9/83.9 kB 288.3 kB/s eta 0:00:00[36m0:00:01[36m0:00:01:01\nInstalling collected packages: xyzservices, bokeh\nSuccessfully installed bokeh-3.5.1 xyzservices-2024.6.0\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.2\n[notice] To update, run: pip3.12 install --upgrade pip\nNote: you may need to restart the kernel to use updated packages.\n\n\n\nimport pandas as pd\nfrom bokeh.plotting import figure, output_notebook, show\n\noutput_notebook()\n\n    \n    \n        \n        Loading BokehJS ...\n    \n\n\n\n\n\n\nf = '../data/Temixco_2018_10Min.csv'\ntmx = pd.read_csv(f,parse_dates=[\"time\"])\ntmx\n\n\n\n\n\n\n\n\ntime\nIb\nIg\nTo\nRH\nWS\nWD\nP\n\n\n\n\n0\n2018-01-01 00:00:00\nNaN\nNaN\n18.70\n36.34\n1.422\n316.0\n87864.11\n\n\n1\n2018-01-01 00:10:00\n0.002\n0.0\n18.95\n35.29\n1.008\n283.7\n87876.37\n\n\n2\n2018-01-01 00:20:00\n0.170\n0.0\n18.94\n35.43\n1.565\n326.0\n87888.64\n\n\n3\n2018-01-01 00:30:00\n0.371\n0.0\n18.77\n35.89\n2.175\n354.5\n87887.21\n\n\n4\n2018-01-01 00:40:00\n0.305\n0.0\n18.81\n36.34\n1.902\n348.0\n87886.91\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n52555\n2018-12-31 23:10:00\n0.125\n0.0\n18.51\n47.29\n1.715\n332.2\n87484.32\n\n\n52556\n2018-12-31 23:20:00\n0.000\n0.0\n18.26\n48.02\n1.703\n320.5\n87470.70\n\n\n52557\n2018-12-31 23:30:00\n0.044\n0.0\n18.39\n46.84\n2.887\n335.7\n87455.03\n\n\n52558\n2018-12-31 23:40:00\n0.170\n0.0\n17.99\n47.85\n1.528\n358.8\n87470.02\n\n\n52559\n2018-12-31 23:50:00\n0.003\n0.0\n17.75\n49.65\n0.598\n322.3\n87467.29\n\n\n\n\n52560 rows × 8 columns\n\n\n\n\np = figure(\n    x_axis_type='datetime',  # Asegura que Bokeh trate el eje x como fechas\n    sizing_mode=\"stretch_width\",# me permite ajustar al ancho de ventana\n    height=150,\n)\n\np.line(x='time', y='Ib', source=tmx, legend_label=\"Ib\", color=\"blue\")\np.line(x='time', y='Ig', source=tmx, legend_label=\"Ig\", color=\"green\")\n\n# Activar la interactividad con la leyenda\np.legend.click_policy=\"hide\"  # Permite ocultar/mostrar la serie al hacer clic en la leyenda\n\nshow(p)",
    "crumbs": [
      "Semana Dos",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Bokeh</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaDos/021_Intro_Altair.html",
    "href": "notebooks/semanaDos/021_Intro_Altair.html",
    "title": "22  Altair",
    "section": "",
    "text": "# pip install \"altair[all]\"\n\n\nimport pandas as pd\nimport altair as alt\nalt.data_transformers.disable_max_rows()\n# alt.data_transformers.enable(\"vegafusion\")\n\nDataTransformerRegistry.enable('default')\n\n\n\nf = '../data/Temixco_2018_10Min.csv'\ntmx = pd.read_csv(f)\ntmx\n\n\n\n\n\n\n\n\ntime\nIb\nIg\nTo\nRH\nWS\nWD\nP\n\n\n\n\n0\n2018-01-01 00:00:00\nNaN\nNaN\n18.70\n36.34\n1.422\n316.0\n87864.11\n\n\n1\n2018-01-01 00:10:00\n0.002\n0.0\n18.95\n35.29\n1.008\n283.7\n87876.37\n\n\n2\n2018-01-01 00:20:00\n0.170\n0.0\n18.94\n35.43\n1.565\n326.0\n87888.64\n\n\n3\n2018-01-01 00:30:00\n0.371\n0.0\n18.77\n35.89\n2.175\n354.5\n87887.21\n\n\n4\n2018-01-01 00:40:00\n0.305\n0.0\n18.81\n36.34\n1.902\n348.0\n87886.91\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n52555\n2018-12-31 23:10:00\n0.125\n0.0\n18.51\n47.29\n1.715\n332.2\n87484.32\n\n\n52556\n2018-12-31 23:20:00\n0.000\n0.0\n18.26\n48.02\n1.703\n320.5\n87470.70\n\n\n52557\n2018-12-31 23:30:00\n0.044\n0.0\n18.39\n46.84\n2.887\n335.7\n87455.03\n\n\n52558\n2018-12-31 23:40:00\n0.170\n0.0\n17.99\n47.85\n1.528\n358.8\n87470.02\n\n\n52559\n2018-12-31 23:50:00\n0.003\n0.0\n17.75\n49.65\n0.598\n322.3\n87467.29\n\n\n\n\n52560 rows × 8 columns\n\n\n\n\nalt.Chart(tmx).mark_line().encode(\n    x='time:T',\n    y='Ig'\n).properties(\n    width=800,\n    height=150\n)\n\n\n\n\n\n\n\n\n# Gráfico base que configura las propiedades comunes\nbase = alt.Chart(tmx).encode(\n    x='time:T'\n).properties(\n    width=800,\n    height=150\n)\n\n# Línea para 'Ig'\nIg = base.mark_line(color='blue').encode(\n    y='Ig'\n)\n\n\n# Línea para 'Ib'\nIb = base.mark_line(color='red').encode(\n    y='Ib'\n)\n\n# Combinar las líneas en un gráfico\nfinal = alt.layer(Ig,Ib)\nfinal = alt.layer(Ig)\n\nfinal\n\n\n\n\n\n\n\n\n22.0.1 Hablar de las desventajas de estos métodos de graficación en el tamaño de los archivos.",
    "crumbs": [
      "Semana Dos",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Altair</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaDos/022a_Matplotlib.html",
    "href": "notebooks/semanaDos/022a_Matplotlib.html",
    "title": "23  Figura rápida con Matplotlib",
    "section": "",
    "text": "Como han contribuido a lo largo del tiempo los 4 paises que más emiten en el 2022 respecto a las emisiones totales e incluir a México\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\nf = \"../data/owid-co2-data.csv\"\nco2 = pd.read_csv(f)\nco2.columns\n\nIndex(['country', 'year', 'iso_code', 'population', 'gdp', 'cement_co2',\n       'cement_co2_per_capita', 'co2', 'co2_growth_abs', 'co2_growth_prct',\n       'co2_including_luc', 'co2_including_luc_growth_abs',\n       'co2_including_luc_growth_prct', 'co2_including_luc_per_capita',\n       'co2_including_luc_per_gdp', 'co2_including_luc_per_unit_energy',\n       'co2_per_capita', 'co2_per_gdp', 'co2_per_unit_energy', 'coal_co2',\n       'coal_co2_per_capita', 'consumption_co2', 'consumption_co2_per_capita',\n       'consumption_co2_per_gdp', 'cumulative_cement_co2', 'cumulative_co2',\n       'cumulative_co2_including_luc', 'cumulative_coal_co2',\n       'cumulative_flaring_co2', 'cumulative_gas_co2', 'cumulative_luc_co2',\n       'cumulative_oil_co2', 'cumulative_other_co2', 'energy_per_capita',\n       'energy_per_gdp', 'flaring_co2', 'flaring_co2_per_capita', 'gas_co2',\n       'gas_co2_per_capita', 'ghg_excluding_lucf_per_capita', 'ghg_per_capita',\n       'land_use_change_co2', 'land_use_change_co2_per_capita', 'methane',\n       'methane_per_capita', 'nitrous_oxide', 'nitrous_oxide_per_capita',\n       'oil_co2', 'oil_co2_per_capita', 'other_co2_per_capita',\n       'other_industry_co2', 'primary_energy_consumption',\n       'share_global_cement_co2', 'share_global_co2',\n       'share_global_co2_including_luc', 'share_global_coal_co2',\n       'share_global_cumulative_cement_co2', 'share_global_cumulative_co2',\n       'share_global_cumulative_co2_including_luc',\n       'share_global_cumulative_coal_co2',\n       'share_global_cumulative_flaring_co2',\n       'share_global_cumulative_gas_co2', 'share_global_cumulative_luc_co2',\n       'share_global_cumulative_oil_co2', 'share_global_cumulative_other_co2',\n       'share_global_flaring_co2', 'share_global_gas_co2',\n       'share_global_luc_co2', 'share_global_oil_co2',\n       'share_global_other_co2', 'share_of_temperature_change_from_ghg',\n       'temperature_change_from_ch4', 'temperature_change_from_co2',\n       'temperature_change_from_ghg', 'temperature_change_from_n2o',\n       'total_ghg', 'total_ghg_excluding_lucf', 'trade_co2',\n       'trade_co2_share'],\n      dtype='object')\n\n\n\nmascara = (co2['year'] == 2022) & (co2['iso_code'].apply(lambda x: isinstance(x, str) and len(x) == 3))\nco2_2022 = co2[mascara]\n\n# # Calculate total CO2 emissions for each country in 2022\nco2_2022.groupby('country')['co2'].sum().sort_values(ascending=False).head(10)\n\ncountry\nChina            11396.777\nUnited States     5057.304\nIndia             2829.644\nRussia            1652.177\nJapan             1053.798\nIndonesia          728.883\nIran               690.635\nGermany            665.605\nSaudi Arabia       662.549\nSouth Korea        600.999\nName: co2, dtype: float64\n\n\n\n# Asumiendo que 'co2' es el DataFrame original con los datos de emisiones\n# Filtrar los datos para incluir solo los cinco \"países\" de interés\npaises_interes = ['China', 'United States', 'India', 'Russia', 'Mexico', 'World']\npaises_co2 = co2[co2['country'].isin(paises_interes)]\n\n# Asegurarse de que los datos están ordenados por país y año\npaises_co2_sorted = paises_co2.sort_values(by=['country', 'year'])\n\n# Crear una pivot table para organizar los datos adecuadamente para el gráfico\ndata_pivot = paises_co2_sorted.pivot(index='year', columns='country', values='co2')\n\n# Verificando la estructura de los datos organizados\ndata_pivot.head()\n\n\n\n\n\n\n\ncountry\nChina\nIndia\nMexico\nRussia\nUnited States\nWorld\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n1750\nNaN\nNaN\nNaN\nNaN\nNaN\n9.306\n\n\n1751\nNaN\nNaN\nNaN\nNaN\nNaN\n9.407\n\n\n1752\nNaN\nNaN\nNaN\nNaN\nNaN\n9.505\n\n\n1753\nNaN\nNaN\nNaN\nNaN\nNaN\n9.610\n\n\n1754\nNaN\nNaN\nNaN\nNaN\nNaN\n9.734\n\n\n\n\n\n\n\n\n\n# Crear el gráfico\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Gráfico de línea para las emisiones globales ('World')\nax.plot(data_pivot.index, data_pivot['World'], label='Mundo', color='black', linewidth=2)\n\n# Stackplot para los cuatro países\nax.stackplot(\n    data_pivot.index,\n    data_pivot['United States'], \n    data_pivot['China'], \n    data_pivot['India'], \n    data_pivot['Russia'],\n    data_pivot['Mexico'],\n    labels=['Estados Unidos', 'China', 'India', 'Rusia','Mexico'], \n    alpha=0.8)\n\n# Añadir título y etiquetas\nax.set_ylabel('CO2 (millones de toneladas)')\nax.legend()\nplt.show()",
    "crumbs": [
      "Semana Dos",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Figura rápida con Matplotlib</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaDos/022b_Plotly.html",
    "href": "notebooks/semanaDos/022b_Plotly.html",
    "title": "24  Figura rápida en Plotly",
    "section": "",
    "text": "Como han contribuido a lo largo del tiempo los 4 paises que más emiten en el 2022 respecto a las emisiones totales e incluir a México\n\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n\nf = \"../data/owid-co2-data.csv\"\nco2 = pd.read_csv(f)\n\n\n# Asumiendo que 'co2' es el DataFrame original con los datos de emisiones\n# Filtrar los datos para incluir solo los cinco \"países\" de interés\npaises_interes = ['China', 'United States', 'India', 'Russia', 'Mexico', 'World']\npaises_co2 = co2[co2['country'].isin(paises_interes)]\n\n# Asegurarse de que los datos están ordenados por país y año\npaises_co2_sorted = paises_co2.sort_values(by=['country', 'year'])\n\n# Crear una pivot table para organizar los datos adecuadamente para el gráfico\ndf_pivot = paises_co2_sorted.pivot(index='year', columns='country', values='co2').fillna(0)\n\n# Verificando la estructura de los datos organizados\ndf_pivot.head()\n\n\n\n\n\n\n\ncountry\nChina\nIndia\nMexico\nRussia\nUnited States\nWorld\n\n\nyear\n\n\n\n\n\n\n\n\n\n\n1750\n0.0\n0.0\n0.0\n0.0\n0.0\n9.306\n\n\n1751\n0.0\n0.0\n0.0\n0.0\n0.0\n9.407\n\n\n1752\n0.0\n0.0\n0.0\n0.0\n0.0\n9.505\n\n\n1753\n0.0\n0.0\n0.0\n0.0\n0.0\n9.610\n\n\n1754\n0.0\n0.0\n0.0\n0.0\n0.0\n9.734\n\n\n\n\n\n\n\n\n# Graficar los datos utilizando Plotly\nfig = go.Figure()\n\n# Añadir las trazas de área para los países seleccionados, World debe estar al final\nfor country in paises_interes[:-1]:\n    fig.add_trace(go.Scatter(\n        x=df_pivot.index, y=df_pivot[country],\n        mode='lines', name=country,\n        stackgroup='one'\n    ))\n\n# Añadir la traza de línea para 'World'\nfig.add_trace(go.Scatter(\n    x=df_pivot.index, y=df_pivot['World'],\n    mode='lines', name='World',\n    line=dict(width=2, color='black')\n))\n\n# Actualizar el diseño para una mejor visualización\nfig.update_layout(\n    title='Emisiones históricas de CO2',\n    xaxis_title='',\n    yaxis_title='CO2 ( Mton)',\n    template='plotly_white'\n)\n\n# Mostrar la gráfica\nfig.show()",
    "crumbs": [
      "Semana Dos",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Figura rápida en Plotly</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/024_Intro_pandas.html",
    "href": "notebooks/semanaTres/024_Intro_pandas.html",
    "title": "25  Introducción rápida a Pandas",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\n%%timeit\nf = '../../data/Temixco_2018_10Min.csv'\npd.read_csv(f,index_col=0,parse_dates=True)\n\n58.5 ms ± 903 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\n\n\n%%timeit\nf = '../../data/Temixco_2018_10Min.xlsx'\npd.read_excel(f,index_col=0,parse_dates=True)\n\n3.93 s ± 101 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n\n\n\nf = '../../data/Temixco_2018_10Min.csv'\ntmx = pd.read_csv(f,index_col=0,parse_dates=True)\ntmx.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 52560 entries, 2018-01-01 00:00:00 to 2018-12-31 23:50:00\nData columns (total 7 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   Ib      52423 non-null  float64\n 1   Ig      52423 non-null  float64\n 2   To      52560 non-null  float64\n 3   RH      52560 non-null  float64\n 4   WS      52560 non-null  float64\n 5   WD      52560 non-null  float64\n 6   P       52560 non-null  float64\ndtypes: float64(7)\nmemory usage: 3.2 MB\n\n\n\n\n\nimage.png\n\n\n\ntmx.plot(subplots=True); ## hacer notar que algunas veces toma mucho tiempo\n\nError in callback &lt;function flush_figures at 0x125cfb7e0&gt; (for post_execute), with arguments args (),kwargs {}:\n\n\n\n---------------------------------------------------------------------------\nKeyboardInterrupt                         Traceback (most recent call last)\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/matplotlib_inline/backend_inline.py:126, in flush_figures()\n    123 if InlineBackend.instance().close_figures:\n    124     # ignore the tracking, just draw and close all figures\n    125     try:\n--&gt; 126         return show(True)\n    127     except Exception as e:\n    128         # safely show traceback if in IPython, else raise\n    129         ip = get_ipython()\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/matplotlib_inline/backend_inline.py:90, in show(close, block)\n     88 try:\n     89     for figure_manager in Gcf.get_all_fig_managers():\n---&gt; 90         display(\n     91             figure_manager.canvas.figure,\n     92             metadata=_fetch_figure_metadata(figure_manager.canvas.figure)\n     93         )\n     94 finally:\n     95     show._to_draw = []\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/IPython/core/display_functions.py:298, in display(include, exclude, metadata, transient, display_id, raw, clear, *objs, **kwargs)\n    296     publish_display_data(data=obj, metadata=metadata, **kwargs)\n    297 else:\n--&gt; 298     format_dict, md_dict = format(obj, include=include, exclude=exclude)\n    299     if not format_dict:\n    300         # nothing to display (e.g. _ipython_display_ took over)\n    301         continue\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/IPython/core/formatters.py:179, in DisplayFormatter.format(self, obj, include, exclude)\n    177 md = None\n    178 try:\n--&gt; 179     data = formatter(obj)\n    180 except:\n    181     # FIXME: log the exception\n    182     raise\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/decorator.py:232, in decorate.&lt;locals&gt;.fun(*args, **kw)\n    230 if not kwsyntax:\n    231     args, kw = fix(args, kw, sig)\n--&gt; 232 return caller(func, *(extras + args), **kw)\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/IPython/core/formatters.py:223, in catch_format_error(method, self, *args, **kwargs)\n    221 \"\"\"show traceback on failed format call\"\"\"\n    222 try:\n--&gt; 223     r = method(self, *args, **kwargs)\n    224 except NotImplementedError:\n    225     # don't warn on NotImplementedErrors\n    226     return self._check_return(None, args[0])\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/IPython/core/formatters.py:340, in BaseFormatter.__call__(self, obj)\n    338     pass\n    339 else:\n--&gt; 340     return printer(obj)\n    341 # Finally look for special method names\n    342 method = get_real_method(obj, self.print_method)\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/IPython/core/pylabtools.py:152, in print_figure(fig, fmt, bbox_inches, base64, **kwargs)\n    149     from matplotlib.backend_bases import FigureCanvasBase\n    150     FigureCanvasBase(fig)\n--&gt; 152 fig.canvas.print_figure(bytes_io, **kw)\n    153 data = bytes_io.getvalue()\n    154 if fmt == 'svg':\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/matplotlib/backend_bases.py:2178, in FigureCanvasBase.print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\n   2176 if bbox_inches:\n   2177     if bbox_inches == \"tight\":\n-&gt; 2178         bbox_inches = self.figure.get_tightbbox(\n   2179             renderer, bbox_extra_artists=bbox_extra_artists)\n   2180         if (isinstance(layout_engine, ConstrainedLayoutEngine) and\n   2181                 pad_inches == \"layout\"):\n   2182             h_pad = layout_engine.get()[\"h_pad\"]\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/matplotlib/_api/deprecation.py:457, in make_keyword_only.&lt;locals&gt;.wrapper(*args, **kwargs)\n    451 if len(args) &gt; name_idx:\n    452     warn_deprecated(\n    453         since, message=\"Passing the %(name)s %(obj_type)s \"\n    454         \"positionally is deprecated since Matplotlib %(since)s; the \"\n    455         \"parameter will become keyword-only %(removal)s.\",\n    456         name=name, obj_type=f\"parameter of {func.__name__}()\")\n--&gt; 457 return func(*args, **kwargs)\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/matplotlib/figure.py:1787, in FigureBase.get_tightbbox(self, renderer, bbox_extra_artists)\n   1783 if ax.get_visible():\n   1784     # some Axes don't take the bbox_extra_artists kwarg so we\n   1785     # need this conditional....\n   1786     try:\n-&gt; 1787         bbox = ax.get_tightbbox(\n   1788             renderer, bbox_extra_artists=bbox_extra_artists)\n   1789     except TypeError:\n   1790         bbox = ax.get_tightbbox(renderer)\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/matplotlib/_api/deprecation.py:457, in make_keyword_only.&lt;locals&gt;.wrapper(*args, **kwargs)\n    451 if len(args) &gt; name_idx:\n    452     warn_deprecated(\n    453         since, message=\"Passing the %(name)s %(obj_type)s \"\n    454         \"positionally is deprecated since Matplotlib %(since)s; the \"\n    455         \"parameter will become keyword-only %(removal)s.\",\n    456         name=name, obj_type=f\"parameter of {func.__name__}()\")\n--&gt; 457 return func(*args, **kwargs)\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/matplotlib/axes/_base.py:4482, in _AxesBase.get_tightbbox(self, renderer, call_axes_locator, bbox_extra_artists, for_layout_only)\n   4480 for axis in self._axis_map.values():\n   4481     if self.axison and axis.get_visible():\n-&gt; 4482         ba = martist._get_tightbbox_for_layout_only(axis, renderer)\n   4483         if ba:\n   4484             bb.append(ba)\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/matplotlib/artist.py:1408, in _get_tightbbox_for_layout_only(obj, *args, **kwargs)\n   1402 \"\"\"\n   1403 Matplotlib's `.Axes.get_tightbbox` and `.Axis.get_tightbbox` support a\n   1404 *for_layout_only* kwarg; this helper tries to use the kwarg but skips it\n   1405 when encountering third-party subclasses that do not support it.\n   1406 \"\"\"\n   1407 try:\n-&gt; 1408     return obj.get_tightbbox(*args, **{**kwargs, \"for_layout_only\": True})\n   1409 except TypeError:\n   1410     return obj.get_tightbbox(*args, **kwargs)\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/matplotlib/axis.py:1371, in Axis.get_tightbbox(self, renderer, for_layout_only)\n   1368     renderer = self.figure._get_renderer()\n   1369 ticks_to_draw = self._update_ticks()\n-&gt; 1371 self._update_label_position(renderer)\n   1373 # go back to just this axis's tick labels\n   1374 tlb1, tlb2 = self._get_ticklabel_bboxes(ticks_to_draw, renderer)\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/matplotlib/axis.py:2410, in XAxis._update_label_position(self, renderer)\n   2408 try:\n   2409     spine = self.axes.spines['bottom']\n-&gt; 2410     spinebbox = spine.get_window_extent()\n   2411 except KeyError:\n   2412     # use Axes if spine doesn't exist\n   2413     spinebbox = self.axes.bbox\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/matplotlib/spines.py:158, in Spine.get_window_extent(self, renderer)\n    156     return bb\n    157 bboxes = [bb]\n--&gt; 158 drawn_ticks = self.axis._update_ticks()\n    160 major_tick = next(iter({*drawn_ticks} & {*self.axis.majorTicks}), None)\n    161 minor_tick = next(iter({*drawn_ticks} & {*self.axis.minorTicks}), None)\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/matplotlib/axis.py:1306, in Axis._update_ticks(self)\n   1304     tick.label1.set_text(label)\n   1305     tick.label2.set_text(label)\n-&gt; 1306 minor_locs = self.get_minorticklocs()\n   1307 minor_labels = self.minor.formatter.format_ticks(minor_locs)\n   1308 minor_ticks = self.get_minor_ticks(len(minor_locs))\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/matplotlib/axis.py:1535, in Axis.get_minorticklocs(self)\n   1533 \"\"\"Return this Axis' minor tick locations in data coordinates.\"\"\"\n   1534 # Remove minor ticks duplicating major ticks.\n-&gt; 1535 minor_locs = np.asarray(self.minor.locator())\n   1536 if self.remove_overlapping_locs:\n   1537     major_locs = self.major.locator()\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/plotting/_matplotlib/converter.py:1001, in TimeSeries_DateLocator.__call__(self)\n    999     vmin, vmax = vmax, vmin\n   1000 if self.isdynamic:\n-&gt; 1001     locs = self._get_default_locs(vmin, vmax)\n   1002 else:  # pragma: no cover\n   1003     base = self.base\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/plotting/_matplotlib/converter.py:986, in TimeSeries_DateLocator._get_default_locs(self, vmin, vmax)\n    984 def _get_default_locs(self, vmin, vmax):\n    985     \"\"\"Returns the default locations of ticks.\"\"\"\n--&gt; 986     locator = self.finder(vmin, vmax, self.freq)\n    988     if self.isminor:\n    989         return np.compress(locator[\"min\"], locator[\"val\"])\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/plotting/_matplotlib/converter.py:732, in _daily_finder(vmin, vmax, freq)\n    730 elif span &lt;= 1.15 * periodsperyear:\n    731     year_start = _period_break(dates_, \"year\")\n--&gt; 732     month_start = _period_break(dates_, \"month\")\n    733     week_start = _period_break(dates_, \"week\")\n    734     info_maj[month_start] = True\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/plotting/_matplotlib/converter.py:525, in _period_break(dates, period)\n    514 def _period_break(dates: PeriodIndex, period: str) -&gt; npt.NDArray[np.intp]:\n    515     \"\"\"\n    516     Returns the indices where the given period changes.\n    517 \n   (...)\n    523         Name of the period to monitor.\n    524     \"\"\"\n--&gt; 525     mask = _period_break_mask(dates, period)\n    526     return np.nonzero(mask)[0]\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/plotting/_matplotlib/converter.py:531, in _period_break_mask(dates, period)\n    529 def _period_break_mask(dates: PeriodIndex, period: str) -&gt; npt.NDArray[np.bool_]:\n    530     current = getattr(dates, period)\n--&gt; 531     previous = getattr(dates - 1 * dates.freq, period)\n    532     return current != previous\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/indexes/extension.py:68, in _inherit_from_data.&lt;locals&gt;.fget(self)\n     67 def fget(self):\n---&gt; 68     result = getattr(self._data, name)\n     69     if wrap:\n     70         if isinstance(result, type(self._data)):\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/arrays/period.py:111, in _field_accessor.&lt;locals&gt;.f(self)\n    109 def f(self):\n    110     base = self.dtype._dtype_code\n--&gt; 111     result = get_period_field_arr(name, self.asi8, base)\n    112     return result\n\nKeyboardInterrupt: \n\n\n\n\ncolumnas = tmx.columns\nfig, ax = plt.subplots(7,figsize=(10,6))\n\nfor i,columna in enumerate(columnas):\n    ax[i].plot(tmx[columna],label=columna)\n    ax[i].legend()\nplt.show() \n\n\n\n\n\n\n\n\n\ntmx.mean()\n\nIb      236.742726\nIg      257.414344\nTo       22.838098\nRH       45.152827\nWS        1.905200\nWD      210.734453\nP     87591.151598\ndtype: float64\n\n\n\ntmx[['Ig','Ib']].mean()\n\nIg    257.414344\nIb    236.742726\ndtype: float64\n\n\n\ntmx.resample('ME').mean()\n\n\n\n\n\n\n\n\nIb\nIg\nTo\nRH\nWS\nWD\nP\n\n\ntime\n\n\n\n\n\n\n\n\n\n\n\n2018-01-31\n229.713302\n207.559305\n19.598040\n33.566660\n1.976923\n227.108655\n87759.582867\n\n\n2018-02-28\n265.335796\n245.766019\n23.018237\n30.830774\n1.925072\n207.425322\n87676.561910\n\n\n2018-03-31\n291.085348\n283.570775\n25.491299\n25.675431\n1.969527\n197.244648\n87425.268981\n\n\n2018-04-30\n236.256088\n289.300213\n25.529778\n31.692567\n2.117917\n188.417818\n87496.062234\n\n\n2018-05-31\n200.070784\n270.222629\n26.747883\n37.973319\n2.049228\n192.587381\n87359.343943\n\n\n2018-06-30\n180.421613\n269.410717\n22.982317\n57.115613\n1.787019\n194.736577\n87552.942243\n\n\n2018-07-31\n276.271034\n310.902144\n23.816322\n44.213600\n1.945517\n210.220904\n87740.813692\n\n\n2018-08-31\n230.954512\n286.472724\n22.119326\n60.574767\n1.853452\n200.686337\n87707.593947\n\n\n2018-09-30\n230.991977\n275.230343\n22.291153\n61.207928\n1.853109\n213.798792\n87532.336271\n\n\n2018-10-31\n221.022707\n243.401029\n22.149418\n60.249711\n1.762850\n219.965041\n87523.024857\n\n\n2018-11-30\n221.582542\n200.433847\n20.636956\n55.397896\n1.731674\n238.815468\n87649.620528\n\n\n2018-12-31\n256.043035\n206.063444\n19.696709\n42.749745\n1.887806\n237.254994\n87674.622088\n\n\n\n\n\n\n\n\ntmx.loc[tmx.Ig &gt;= 300]\n\n\n\n\n\n\n\n\nIb\nIg\nTo\nRH\nWS\nWD\nP\n\n\ntime\n\n\n\n\n\n\n\n\n\n\n\n2018-01-01 09:10:00\n533.6\n315.4\n19.58\n34.76\n0.842\n167.1\n88161.86\n\n\n2018-01-01 09:20:00\n556.8\n349.5\n20.31\n33.36\n1.198\n172.0\n88156.05\n\n\n2018-01-01 09:30:00\n574.3\n379.8\n20.21\n32.46\n0.947\n203.4\n88165.92\n\n\n2018-01-01 09:40:00\n589.4\n410.6\n20.38\n31.60\n1.457\n183.7\n88160.85\n\n\n2018-01-01 09:50:00\n611.2\n445.6\n20.46\n31.72\n2.448\n209.2\n88169.38\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2018-12-31 16:00:00\n302.3\n366.4\n25.28\n27.20\n3.585\n211.1\n87320.61\n\n\n2018-12-31 16:10:00\n686.4\n549.3\n25.47\n25.88\n2.023\n181.5\n87339.67\n\n\n2018-12-31 16:20:00\n447.8\n389.1\n25.66\n25.96\n1.593\n172.4\n87322.26\n\n\n2018-12-31 16:30:00\n722.8\n417.4\n25.72\n25.40\n1.983\n184.5\n87326.93\n\n\n2018-12-31 16:40:00\n667.0\n330.7\n26.31\n24.89\n1.323\n260.6\n87328.50\n\n\n\n\n17808 rows × 7 columns\n\n\n\n\n# Diccionario de diccionarios\nparticipantes = {\n    'Diego': {'Edad': 30, 'Ciudad': 'Campeche'},\n    'Nazli': {'Edad': 22, 'Ciudad': 'CdMx'},\n    'Kevin': {'Edad': 40, 'Ciudad': 'Cuernavaca'},\n    'Gaby': {'Edad': 37, 'Ciudad': 'Cuautla'},\n\n}\n\n# Convertir a DataFrame\nparticipantes_df = pd.DataFrame.from_dict(participantes, orient='index')\nparticipantes_df\n\n\n\n\n\n\n\n\nEdad\nCiudad\n\n\n\n\nDiego\n30\nCampeche\n\n\nNazli\n22\nCdMx\n\n\nKevin\n40\nCuernavaca\n\n\nGaby\n37\nCuautla\n\n\n\n\n\n\n\n\n# Diccionario con tuplas como valores\nnombres = {\n    'Equipa': [\n        ('Diego', 30),\n        ('Nazli', 22),\n        ('Kevin', 40)\n    ]\n}\n\n# Convertir a DataFrame\nnombres_df = pd.DataFrame(nombres['Equipa'], columns=['Nombre', 'Edad'])\nnombres_df\n\n\n\n\n\n\n\n\nNombre\nEdad\n\n\n\n\n0\nDiego\n30\n\n\n1\nNazli\n22\n\n\n2\nKevin\n40\n\n\n\n\n\n\n\n\n\n# Diccionario sin fechas\nnombres = {\n    'Nombre': ['Diego', 'Nazli', 'Kevin'],\n    'Edad': [30, 22, 40]\n}\n\n# Convertir a DataFrame\nnombres_df = pd.DataFrame(nombres_df)\nnombres_df\n\n\n\n\n\n\n\n\nNombre\nEdad\n\n\n\n\n0\nDiego\n30\n\n\n1\nNazli\n22\n\n\n2\nKevin\n40\n\n\n\n\n\n\n\n\nAlgunas cosas que se pueden hacer con pandas\n\nLectura y escritura de datos\n\ncsv\nexcel\nclipboard\nparquet\nsql\nhdf5\nhtml\n\nLimpieza de datos\nTransformación de datos\nVisualización rápida de datos\nEstadística de datos\nInspección rápida de estructura y tipos de datos\nSelección y filtrado de datos\nCombinación de datos\nAgrupación de datos",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Introducción rápida a Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/025_Promedios_moviles.html",
    "href": "notebooks/semanaTres/025_Promedios_moviles.html",
    "title": "26  Promedios móvil",
    "section": "",
    "text": "26.0.1 window = 6\nSi la ventana es de 6, para este conjunto de datos, es cada hora\ntmx['To'].rolling(window=6).mean()\n\ntime\n2018-01-01 00:00:00          NaN\n2018-01-01 00:10:00          NaN\n2018-01-01 00:20:00          NaN\n2018-01-01 00:30:00          NaN\n2018-01-01 00:40:00          NaN\n                         ...    \n2018-12-31 23:10:00    18.595000\n2018-12-31 23:20:00    18.563333\n2018-12-31 23:30:00    18.543333\n2018-12-31 23:40:00    18.450000\n2018-12-31 23:50:00    18.251667\nName: To, Length: 52560, dtype: float64\ntmx['To'].rolling(window=6,center=True).mean()\n\ntime\n2018-01-01 00:00:00          NaN\n2018-01-01 00:10:00          NaN\n2018-01-01 00:20:00          NaN\n2018-01-01 00:30:00    18.900000\n2018-01-01 00:40:00    18.988333\n                         ...    \n2018-12-31 23:10:00    18.543333\n2018-12-31 23:20:00    18.450000\n2018-12-31 23:30:00    18.251667\n2018-12-31 23:40:00          NaN\n2018-12-31 23:50:00          NaN\nName: To, Length: 52560, dtype: float64\nfig, ax = plt.subplots(figsize=(10,4))\nfecha1 = parse('2018-06-26')\nfecha2 = fecha1 + pd.Timedelta('1D')\n\nax.plot(tmx.To,'go',label='To')\nax.plot(tmx['To'].rolling(window=6).mean(),'ro',label='Window') # Cambiar window de 6 a 1\nax.plot(tmx['To'].rolling(window=6,center=True).mean(),'yo',label='Center') # Cambiar window de 6 a 1\n\n\nax.set_xlim(fecha1,fecha2)\nax.set_xlim(fecha1,fecha2)\nax.legend()\ntmx['Ib'].expanding().mean().plot()\ntmx.Ib.mean()\n\n236.74272595997937\ntmx['Ib'].expanding().mean().plot()",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Promedios móvil</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/025_Promedios_moviles.html#ema-en-funcion-de-alpha",
    "href": "notebooks/semanaTres/025_Promedios_moviles.html#ema-en-funcion-de-alpha",
    "title": "26  Promedios móvil",
    "section": "26.1 EMA en funci’on de alpha",
    "text": "26.1 EMA en funci’on de alpha\n\ntmx['To'].ewm(span=144).mean().plot()\ntmx.To.resample('D').mean().plot()",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Promedios móvil</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/025_Promedios_moviles.html#explora-en-rolling-el-uso-de",
    "href": "notebooks/semanaTres/025_Promedios_moviles.html#explora-en-rolling-el-uso-de",
    "title": "26  Promedios móvil",
    "section": "26.2 Explora en rolling el uso de:",
    "text": "26.2 Explora en rolling el uso de:\n\nclosed\nel uso de timedelta en window\nstep\naxis\non",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Promedios móvil</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/025_Promedios_moviles.html#para-expanding-explora",
    "href": "notebooks/semanaTres/025_Promedios_moviles.html#para-expanding-explora",
    "title": "26  Promedios móvil",
    "section": "26.3 Para expanding explora:",
    "text": "26.3 Para expanding explora:\n\nmin_periods\naxis ## Para ewm explora\n$ _t = t + (1 - ) {t-1} $\nspan\ncom\nhalflife\nalpha",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Promedios móvil</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/026_Desplazamientos.html",
    "href": "notebooks/semanaTres/026_Desplazamientos.html",
    "title": "27  Desplazamiento de datos",
    "section": "",
    "text": "import pandas as pd\nimport plotly.express as px\n\n\nf = '../../data/owid-co2-data.csv'\nall_co2 = pd.read_csv(f)\n\n\nall_co2.columns\n\nIndex(['country', 'year', 'iso_code', 'population', 'gdp', 'cement_co2',\n       'cement_co2_per_capita', 'co2', 'co2_growth_abs', 'co2_growth_prct',\n       'co2_including_luc', 'co2_including_luc_growth_abs',\n       'co2_including_luc_growth_prct', 'co2_including_luc_per_capita',\n       'co2_including_luc_per_gdp', 'co2_including_luc_per_unit_energy',\n       'co2_per_capita', 'co2_per_gdp', 'co2_per_unit_energy', 'coal_co2',\n       'coal_co2_per_capita', 'consumption_co2', 'consumption_co2_per_capita',\n       'consumption_co2_per_gdp', 'cumulative_cement_co2', 'cumulative_co2',\n       'cumulative_co2_including_luc', 'cumulative_coal_co2',\n       'cumulative_flaring_co2', 'cumulative_gas_co2', 'cumulative_luc_co2',\n       'cumulative_oil_co2', 'cumulative_other_co2', 'energy_per_capita',\n       'energy_per_gdp', 'flaring_co2', 'flaring_co2_per_capita', 'gas_co2',\n       'gas_co2_per_capita', 'ghg_excluding_lucf_per_capita', 'ghg_per_capita',\n       'land_use_change_co2', 'land_use_change_co2_per_capita', 'methane',\n       'methane_per_capita', 'nitrous_oxide', 'nitrous_oxide_per_capita',\n       'oil_co2', 'oil_co2_per_capita', 'other_co2_per_capita',\n       'other_industry_co2', 'primary_energy_consumption',\n       'share_global_cement_co2', 'share_global_co2',\n       'share_global_co2_including_luc', 'share_global_coal_co2',\n       'share_global_cumulative_cement_co2', 'share_global_cumulative_co2',\n       'share_global_cumulative_co2_including_luc',\n       'share_global_cumulative_coal_co2',\n       'share_global_cumulative_flaring_co2',\n       'share_global_cumulative_gas_co2', 'share_global_cumulative_luc_co2',\n       'share_global_cumulative_oil_co2', 'share_global_cumulative_other_co2',\n       'share_global_flaring_co2', 'share_global_gas_co2',\n       'share_global_luc_co2', 'share_global_oil_co2',\n       'share_global_other_co2', 'share_of_temperature_change_from_ghg',\n       'temperature_change_from_ch4', 'temperature_change_from_co2',\n       'temperature_change_from_ghg', 'temperature_change_from_n2o',\n       'total_ghg', 'total_ghg_excluding_lucf', 'trade_co2',\n       'trade_co2_share'],\n      dtype='object')\n\n\n\nall_co2.iso_code.unique()\n\narray(['AFG', nan, 'ALB', 'DZA', 'AND', 'AGO', 'AIA', 'ATA', 'ATG', 'ARG',\n       'ARM', 'ABW', 'AUS', 'AUT', 'AZE', 'BHS', 'BHR', 'BGD', 'BRB',\n       'BLR', 'BEL', 'BLZ', 'BEN', 'BMU', 'BTN', 'BOL', 'BES', 'BIH',\n       'BWA', 'BRA', 'VGB', 'BRN', 'BGR', 'BFA', 'BDI', 'KHM', 'CMR',\n       'CAN', 'CPV', 'CAF', 'TCD', 'CHL', 'CHN', 'CXR', 'COL', 'COM',\n       'COG', 'COK', 'CRI', 'CIV', 'HRV', 'CUB', 'CUW', 'CYP', 'CZE',\n       'COD', 'DNK', 'DJI', 'DMA', 'DOM', 'TLS', 'ECU', 'EGY', 'SLV',\n       'GNQ', 'ERI', 'EST', 'SWZ', 'ETH', 'FRO', 'FJI', 'FIN', 'FRA',\n       'PYF', 'GAB', 'GMB', 'GEO', 'DEU', 'GHA', 'GRC', 'GRL', 'GRD',\n       'GTM', 'GIN', 'GNB', 'GUY', 'HTI', 'HND', 'HKG', 'HUN', 'ISL',\n       'IND', 'IDN', 'IRN', 'IRQ', 'IRL', 'ISR', 'ITA', 'JAM', 'JPN',\n       'JOR', 'KAZ', 'KEN', 'KIR', 'KWT', 'KGZ', 'LAO', 'LVA', 'LBN',\n       'LSO', 'LBR', 'LBY', 'LIE', 'LTU', 'LUX', 'MAC', 'MDG', 'MWI',\n       'MYS', 'MDV', 'MLI', 'MLT', 'MHL', 'MRT', 'MUS', 'MEX', 'FSM',\n       'MDA', 'MCO', 'MNG', 'MNE', 'MSR', 'MAR', 'MOZ', 'MMR', 'NAM',\n       'NRU', 'NPL', 'NLD', 'NCL', 'NZL', 'NIC', 'NER', 'NGA', 'NIU',\n       'PRK', 'MKD', 'NOR', 'OMN', 'PAK', 'PLW', 'PSE', 'PAN', 'PNG',\n       'PRY', 'PER', 'PHL', 'POL', 'PRT', 'QAT', 'ROU', 'RUS', 'RWA',\n       'SHN', 'KNA', 'LCA', 'SPM', 'VCT', 'WSM', 'SMR', 'STP', 'SAU',\n       'SEN', 'SRB', 'SYC', 'SLE', 'SGP', 'SXM', 'SVK', 'SVN', 'SLB',\n       'SOM', 'ZAF', 'KOR', 'SSD', 'ESP', 'LKA', 'SDN', 'SUR', 'SWE',\n       'CHE', 'SYR', 'TWN', 'TJK', 'TZA', 'THA', 'TGO', 'TON', 'TTO',\n       'TUN', 'TUR', 'TKM', 'TCA', 'TUV', 'UGA', 'UKR', 'ARE', 'GBR',\n       'USA', 'URY', 'UZB', 'VUT', 'VAT', 'VEN', 'VNM', 'WLF', 'YEM',\n       'ZMB', 'ZWE'], dtype=object)\n\n\n\nmascara_mex = all_co2['iso_code']=='MEX'\ncolumnas = ['co2','year','co2_growth_prct']\n\nco2_mex = all_co2[mascara_mex][columnas]\n\n\nco2_mex\n\n\n\n\n\n\n\n\nco2\nyear\nco2_growth_prct\n\n\n\n\n27144\nNaN\n1850\nNaN\n\n\n27145\nNaN\n1851\nNaN\n\n\n27146\nNaN\n1852\nNaN\n\n\n27147\nNaN\n1853\nNaN\n\n\n27148\nNaN\n1854\nNaN\n\n\n...\n...\n...\n...\n\n\n27312\n470.286\n2018\n1.002\n\n\n27313\n468.322\n2019\n-0.418\n\n\n27314\n442.289\n2020\n-5.559\n\n\n27315\n468.791\n2021\n5.992\n\n\n27316\n511.972\n2022\n9.211\n\n\n\n\n173 rows × 3 columns\n\n\n\n\nco2_mex.sort_values(by='year',ascending=True,inplace=True)\nco2_mex\n\n\n\n\n\n\n\n\nco2\nyear\nco2_growth_prct\n\n\n\n\n27144\nNaN\n1850\nNaN\n\n\n27145\nNaN\n1851\nNaN\n\n\n27146\nNaN\n1852\nNaN\n\n\n27147\nNaN\n1853\nNaN\n\n\n27148\nNaN\n1854\nNaN\n\n\n...\n...\n...\n...\n\n\n27312\n470.286\n2018\n1.002\n\n\n27313\n468.322\n2019\n-0.418\n\n\n27314\n442.289\n2020\n-5.559\n\n\n27315\n468.791\n2021\n5.992\n\n\n27316\n511.972\n2022\n9.211\n\n\n\n\n173 rows × 3 columns\n\n\n\n\nco2_mex['pct_change'] = co2_mex['co2'].pct_change() * 100\nco2_mex\n\n\n\n\n\n\n\n\nco2\nyear\nco2_growth_prct\npct_change\n\n\n\n\n27144\nNaN\n1850\nNaN\nNaN\n\n\n27145\nNaN\n1851\nNaN\nNaN\n\n\n27146\nNaN\n1852\nNaN\nNaN\n\n\n27147\nNaN\n1853\nNaN\nNaN\n\n\n27148\nNaN\n1854\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n\n\n27312\n470.286\n2018\n1.002\n1.001888\n\n\n27313\n468.322\n2019\n-0.418\n-0.417618\n\n\n27314\n442.289\n2020\n-5.559\n-5.558782\n\n\n27315\n468.791\n2021\n5.992\n5.992010\n\n\n27316\n511.972\n2022\n9.211\n9.211141\n\n\n\n\n173 rows × 4 columns\n\n\n\n\npx.scatter(co2_mex,x='year',y=['pct_change','co2_growth_prct'])\n\n                                                \n\n\n\nco2_mex['co2_diff'] =  co2_mex.co2 - co2_mex['co2'].shift(1)\nco2_mex\n\n\n\n\n\n\n\n\nco2\nyear\nco2_growth_prct\npct_change\nco2_diff\n\n\n\n\n27144\nNaN\n1850\nNaN\nNaN\nNaN\n\n\n27145\nNaN\n1851\nNaN\nNaN\nNaN\n\n\n27146\nNaN\n1852\nNaN\nNaN\nNaN\n\n\n27147\nNaN\n1853\nNaN\nNaN\nNaN\n\n\n27148\nNaN\n1854\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n\n\n27312\n470.286\n2018\n1.002\n1.001888\n4.665\n\n\n27313\n468.322\n2019\n-0.418\n-0.417618\n-1.964\n\n\n27314\n442.289\n2020\n-5.559\n-5.558782\n-26.033\n\n\n27315\n468.791\n2021\n5.992\n5.992010\n26.502\n\n\n27316\n511.972\n2022\n9.211\n9.211141\n43.181\n\n\n\n\n173 rows × 5 columns\n\n\n\n\npx.scatter(co2_mex,x='year',y=['co2_diff'])\n\n                                                \n\n\n\npx.scatter(x=co2_mex['year'],y=co2_mex['co2'].diff()) # revisar argumentos ed diff",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Desplazamiento de datos</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/027_parquet.html",
    "href": "notebooks/semanaTres/027_parquet.html",
    "title": "28  Parquet",
    "section": "",
    "text": "Explora además:\nPon atención a las dependencias que tengas que instalar",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Parquet</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/027_parquet.html#explora-además",
    "href": "notebooks/semanaTres/027_parquet.html#explora-además",
    "title": "28  Parquet",
    "section": "",
    "text": "hdf5\nfeather\napache orc\npickle",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Parquet</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/028_groupby.html",
    "href": "notebooks/semanaTres/028_groupby.html",
    "title": "29  Agrupamiento de datos con groupby",
    "section": "",
    "text": "import pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n\nf = '../../data/owid-co2-data.csv'\nco2 = pd.read_csv(f)\nco2\n\n\n\n\n\n\n\n\ncountry\nyear\niso_code\npopulation\ngdp\ncement_co2\ncement_co2_per_capita\nco2\nco2_growth_abs\nco2_growth_prct\n...\nshare_global_other_co2\nshare_of_temperature_change_from_ghg\ntemperature_change_from_ch4\ntemperature_change_from_co2\ntemperature_change_from_ghg\ntemperature_change_from_n2o\ntotal_ghg\ntotal_ghg_excluding_lucf\ntrade_co2\ntrade_co2_share\n\n\n\n\n0\nAfghanistan\n1850\nAFG\n3752993.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nAfghanistan\n1851\nAFG\n3767956.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\n0.157\n0.000\n0.000\n0.000\n0.0\nNaN\nNaN\nNaN\nNaN\n\n\n2\nAfghanistan\n1852\nAFG\n3783940.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\n0.156\n0.000\n0.000\n0.000\n0.0\nNaN\nNaN\nNaN\nNaN\n\n\n3\nAfghanistan\n1853\nAFG\n3800954.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\n0.156\n0.000\n0.000\n0.000\n0.0\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAfghanistan\n1854\nAFG\n3818038.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\n0.155\n0.000\n0.000\n0.000\n0.0\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n47410\nZimbabwe\n2018\nZWE\n15052191.0\n2.678627e+10\n0.558\n0.037\n10.715\n1.419\n15.265\n...\nNaN\n0.114\n0.001\n0.001\n0.002\n0.0\n116.76\n29.37\n-0.088\n-0.825\n\n\n47411\nZimbabwe\n2019\nZWE\n15354606.0\n2.514642e+10\n0.473\n0.031\n9.775\n-0.939\n-8.765\n...\nNaN\n0.113\n0.001\n0.001\n0.002\n0.0\n116.03\n28.70\n0.143\n1.463\n\n\n47412\nZimbabwe\n2020\nZWE\n15669663.0\n2.317871e+10\n0.496\n0.032\n7.850\n-1.926\n-19.700\n...\nNaN\n0.112\n0.001\n0.001\n0.002\n0.0\n113.20\n25.99\n0.818\n10.421\n\n\n47413\nZimbabwe\n2021\nZWE\n15993525.0\n2.514009e+10\n0.531\n0.033\n8.396\n0.547\n6.962\n...\nNaN\n0.110\n0.001\n0.001\n0.002\n0.0\nNaN\nNaN\n1.088\n12.956\n\n\n47414\nZimbabwe\n2022\nZWE\n16320539.0\n2.590159e+10\n0.531\n0.033\n8.856\n0.460\n5.477\n...\nNaN\n0.110\n0.001\n0.001\n0.002\n0.0\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n47415 rows × 79 columns\n\n\n\n\npx.line(co2, x = 'year',y='co2',color='country')\n\n                                                \n\n\n\nco2.groupby('country')['co2'].sum().reset_index().sort_values(by='co2',ascending=False).head(20)\n\n\n\n\n\n\n\n\ncountry\nco2\n\n\n\n\n257\nWorld\n1772867.527\n\n\n98\nHigh-income countries\n1001743.141\n\n\n176\nOECD (GCP)\n967949.828\n\n\n169\nNon-OECD (GCP)\n756445.479\n\n\n13\nAsia\n578424.628\n\n\n249\nUpper-middle-income countries\n553307.841\n\n\n74\nEurope\n542459.558\n\n\n75\nEurope (GCP)\n538058.253\n\n\n14\nAsia (GCP)\n503963.270\n\n\n170\nNorth America\n490241.437\n\n\n171\nNorth America (GCP)\n482514.750\n\n\n248\nUnited States\n426914.556\n\n\n79\nEuropean Union (28)\n374804.679\n\n\n78\nEuropean Union (27)\n295969.981\n\n\n47\nChina\n260619.243\n\n\n15\nAsia (excl. China and India)\n258064.693\n\n\n76\nEurope (excl. EU-27)\n246489.581\n\n\n77\nEurope (excl. EU-28)\n167654.884\n\n\n136\nLower-middle-income countries\n163674.534\n\n\n195\nRussia\n119290.814\n\n\n\n\n\n\n\n\nco2.groupby('iso_code')['co2'].sum().reset_index().sort_values(by='co2',ascending=False).head(20)\n\n\n\n\n\n\n\n\niso_code\nco2\n\n\n\n\n204\nUSA\n426914.556\n\n\n37\nCHN\n260619.243\n\n\n163\nRUS\n119290.814\n\n\n52\nDEU\n93985.871\n\n\n70\nGBR\n78834.706\n\n\n97\nJPN\n67734.911\n\n\n88\nIND\n59740.694\n\n\n66\nFRA\n39397.693\n\n\n34\nCAN\n34613.228\n\n\n202\nUKR\n30961.508\n\n\n155\nPOL\n28503.614\n\n\n94\nITA\n25416.444\n\n\n215\nZAF\n21859.984\n\n\n123\nMEX\n21119.477\n\n\n90\nIRN\n19852.750\n\n\n104\nKOR\n19528.810\n\n\n11\nAUS\n19285.056\n\n\n165\nSAU\n17595.887\n\n\n28\nBRA\n17176.783\n\n\n87\nIDN\n15712.110\n\n\n\n\n\n\n\n\nco2.groupby('country')['co2'].max().reset_index().sort_values(by='co2',ascending=False).head(20)\n\n\n\n\n\n\n\n\ncountry\nco2\n\n\n\n\n257\nWorld\n37149.785\n\n\n169\nNon-OECD (GCP)\n24332.602\n\n\n13\nAsia\n21772.348\n\n\n14\nAsia (GCP)\n19102.592\n\n\n249\nUpper-middle-income countries\n17616.729\n\n\n98\nHigh-income countries\n14603.550\n\n\n176\nOECD (GCP)\n14040.573\n\n\n47\nChina\n11396.777\n\n\n74\nEurope\n8038.431\n\n\n75\nEurope (GCP)\n8038.430\n\n\n15\nAsia (excl. China and India)\n7545.928\n\n\n170\nNorth America\n7366.565\n\n\n171\nNorth America (GCP)\n7198.346\n\n\n248\nUnited States\n6132.183\n\n\n136\nLower-middle-income countries\n5672.114\n\n\n79\nEuropean Union (28)\n4757.648\n\n\n76\nEurope (excl. EU-27)\n4168.003\n\n\n78\nEuropean Union (27)\n4113.135\n\n\n77\nEurope (excl. EU-28)\n3566.058\n\n\n103\nIndia\n2829.644\n\n\n\n\n\n\n\n\npaises = co2[['co2','country','year']].groupby(['country','year']).sum()\npaises.loc['United States']\n\n\n\n\n\n\n\n\nco2\n\n\nyear\n\n\n\n\n\n1800\n0.253\n\n\n1801\n0.267\n\n\n1802\n0.289\n\n\n1803\n0.297\n\n\n1804\n0.333\n\n\n...\n...\n\n\n2018\n5377.797\n\n\n2019\n5262.145\n\n\n2020\n4714.628\n\n\n2021\n5032.213\n\n\n2022\n5057.304\n\n\n\n\n223 rows × 1 columns\n\n\n\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(x=paises.loc['United States'].index,y=paises.loc['United States']['co2'],name='USA')\n)\n\nfig.add_trace(\n    go.Scatter(x=paises.loc['Mexico'].index,y=paises.loc['Mexico']['co2'],name='Mex')\n)\nfig.add_trace(\n    go.Scatter(x=paises.loc['World'].index,y=paises.loc['World']['co2'],name='WLD')\n)\n\nfig.show()",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Agrupamiento de datos con groupby</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/029_pivot_table.html",
    "href": "notebooks/semanaTres/029_pivot_table.html",
    "title": "30  Pivot table",
    "section": "",
    "text": "30.1 Usando pivot_table vamos a crear un mapa de calor o heatmap de la temperatura promedio horario para cada mes.\n# Extraer el mes y la hora de la columna de tiempo\ntmx['month'] = tmx.index.month\ntmx['hour'] = tmx.index.hour\n\n# Crear una tabla dinámica con el promedio de temperatura por mes y hora\ntabla_To = tmx.pivot_table(values='To', index='hour', columns='month', aggfunc='mean')\ntabla_To\n\n\n\n\n\n\n\nmonth\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nhour\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n17.797527\n21.013452\n23.430914\n23.038722\n24.222097\n20.725278\n21.910376\n19.661129\n20.025889\n20.056183\n18.505333\n17.276828\n\n\n1\n17.038118\n20.359226\n22.676129\n22.344833\n23.548548\n20.424667\n21.210376\n19.261613\n19.807389\n19.713333\n18.061167\n16.754785\n\n\n2\n16.406237\n19.759821\n21.900699\n21.774000\n22.782258\n20.069056\n20.591774\n19.024462\n19.327056\n19.205269\n17.666278\n16.252204\n\n\n3\n15.751398\n19.020060\n21.246237\n21.230556\n22.294194\n19.710833\n19.907366\n18.792688\n18.959778\n18.844086\n17.328056\n15.943118\n\n\n4\n15.315054\n18.469524\n20.674140\n20.588556\n21.784194\n19.380722\n19.424785\n18.455269\n18.625000\n18.541075\n16.964611\n15.516828\n\n\n5\n14.731774\n17.912083\n20.108011\n19.925944\n21.264194\n18.967167\n18.919462\n18.220645\n18.321444\n18.254355\n16.646056\n15.051774\n\n\n6\n14.243011\n17.352143\n19.515806\n19.667333\n21.011505\n18.926611\n18.629946\n17.999570\n18.017833\n17.951774\n16.259444\n14.591559\n\n\n7\n14.144946\n17.177262\n19.789355\n20.778000\n22.228871\n20.020667\n20.064624\n19.058387\n18.998111\n18.653280\n16.766722\n14.611183\n\n\n8\n16.113602\n19.568750\n22.644624\n23.237944\n24.060968\n21.398222\n22.405538\n20.913065\n20.966111\n21.080484\n19.197944\n17.168441\n\n\n9\n18.582742\n21.940238\n24.034892\n24.313667\n25.332473\n22.435333\n23.276720\n21.888333\n22.225611\n22.462849\n20.750056\n19.405215\n\n\n10\n19.662634\n23.101071\n25.281505\n25.626611\n26.667097\n23.423889\n24.267634\n22.873763\n23.141333\n23.405806\n21.768278\n20.582419\n\n\n11\n21.047473\n24.426488\n26.656935\n27.097667\n28.177581\n24.520944\n25.400108\n23.957204\n24.182333\n24.279140\n22.837556\n21.801398\n\n\n12\n22.511989\n25.710119\n28.073656\n28.414556\n29.548871\n25.413778\n26.383226\n24.956237\n25.001167\n25.309516\n23.931389\n23.073656\n\n\n13\n23.698978\n26.940714\n29.319570\n29.703389\n30.806183\n26.349556\n27.326828\n25.764624\n25.927500\n26.102043\n24.886944\n24.227366\n\n\n14\n24.734032\n27.736548\n30.375269\n30.679944\n31.759892\n27.109611\n28.186022\n26.515323\n26.632722\n26.756613\n25.510556\n25.285806\n\n\n15\n25.394462\n28.568571\n31.080108\n31.150833\n32.473441\n27.594333\n28.685806\n26.903333\n26.946944\n27.080699\n25.755167\n25.810376\n\n\n16\n25.626290\n28.967262\n31.513226\n31.264611\n32.682849\n27.448889\n29.004677\n26.933817\n26.729833\n26.867634\n25.694111\n25.882366\n\n\n17\n25.271613\n28.759226\n31.464624\n30.977500\n32.501290\n27.067222\n28.620968\n26.318441\n26.234611\n26.215591\n24.991667\n25.286183\n\n\n18\n23.819355\n27.769583\n30.556720\n30.136556\n31.797581\n26.396333\n27.632957\n25.405484\n25.101833\n24.513548\n22.842056\n23.088602\n\n\n19\n21.203441\n25.858690\n29.009516\n28.896667\n30.441667\n25.065944\n25.984355\n23.872527\n23.471500\n22.615108\n20.710333\n20.438978\n\n\n20\n20.058065\n24.091726\n27.188172\n27.495611\n28.625753\n23.667278\n24.360054\n22.503011\n22.514444\n21.817903\n20.161111\n19.482151\n\n\n21\n19.655054\n23.379286\n26.053441\n25.832722\n27.127043\n22.594222\n23.418441\n21.286989\n21.853778\n20.983871\n19.688611\n18.848763\n\n\n22\n19.170968\n22.675655\n25.015699\n24.846111\n25.843065\n21.769444\n23.231505\n20.366559\n21.297111\n20.616505\n19.376778\n18.376667\n\n\n23\n18.374194\n21.880179\n24.181935\n23.692333\n24.967581\n21.095611\n22.748172\n19.931344\n20.678333\n20.259355\n18.986722\n17.964355\nfig = px.imshow(\n    tabla_To,\n    aspect=\"auto\",\n    x=['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],\n    y=[str(hour) + ':00' for hour in range(24)],\n    color_continuous_scale='jet',\n)\nfig.show()",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Pivot table</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/029_pivot_table.html#usando-pivot_table-y-groupby-vamos-a-obtener-los-10-paises-que-mas-contaminan-desde-el-2000-y-vamos-a-visualizar-sus-emisiones-por-año.",
    "href": "notebooks/semanaTres/029_pivot_table.html#usando-pivot_table-y-groupby-vamos-a-obtener-los-10-paises-que-mas-contaminan-desde-el-2000-y-vamos-a-visualizar-sus-emisiones-por-año.",
    "title": "30  Pivot table",
    "section": "30.2 Usando pivot_table y groupby vamos a obtener los 10 paises que m’as contaminan desde el 2000 y vamos a visualizar sus emisiones por año.",
    "text": "30.2 Usando pivot_table y groupby vamos a obtener los 10 paises que m’as contaminan desde el 2000 y vamos a visualizar sus emisiones por año.\n\nf = '../../data/owid-co2-data.csv'\nco2 = pd.read_csv(f)\nco2\n\n\n\n\n\n\n\n\ncountry\nyear\niso_code\npopulation\ngdp\ncement_co2\ncement_co2_per_capita\nco2\nco2_growth_abs\nco2_growth_prct\n...\nshare_global_other_co2\nshare_of_temperature_change_from_ghg\ntemperature_change_from_ch4\ntemperature_change_from_co2\ntemperature_change_from_ghg\ntemperature_change_from_n2o\ntotal_ghg\ntotal_ghg_excluding_lucf\ntrade_co2\ntrade_co2_share\n\n\n\n\n0\nAfghanistan\n1850\nAFG\n3752993.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nAfghanistan\n1851\nAFG\n3767956.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\n0.157\n0.000\n0.000\n0.000\n0.0\nNaN\nNaN\nNaN\nNaN\n\n\n2\nAfghanistan\n1852\nAFG\n3783940.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\n0.156\n0.000\n0.000\n0.000\n0.0\nNaN\nNaN\nNaN\nNaN\n\n\n3\nAfghanistan\n1853\nAFG\n3800954.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\n0.156\n0.000\n0.000\n0.000\n0.0\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAfghanistan\n1854\nAFG\n3818038.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\n0.155\n0.000\n0.000\n0.000\n0.0\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n47410\nZimbabwe\n2018\nZWE\n15052191.0\n2.678627e+10\n0.558\n0.037\n10.715\n1.419\n15.265\n...\nNaN\n0.114\n0.001\n0.001\n0.002\n0.0\n116.76\n29.37\n-0.088\n-0.825\n\n\n47411\nZimbabwe\n2019\nZWE\n15354606.0\n2.514642e+10\n0.473\n0.031\n9.775\n-0.939\n-8.765\n...\nNaN\n0.113\n0.001\n0.001\n0.002\n0.0\n116.03\n28.70\n0.143\n1.463\n\n\n47412\nZimbabwe\n2020\nZWE\n15669663.0\n2.317871e+10\n0.496\n0.032\n7.850\n-1.926\n-19.700\n...\nNaN\n0.112\n0.001\n0.001\n0.002\n0.0\n113.20\n25.99\n0.818\n10.421\n\n\n47413\nZimbabwe\n2021\nZWE\n15993525.0\n2.514009e+10\n0.531\n0.033\n8.396\n0.547\n6.962\n...\nNaN\n0.110\n0.001\n0.001\n0.002\n0.0\nNaN\nNaN\n1.088\n12.956\n\n\n47414\nZimbabwe\n2022\nZWE\n16320539.0\n2.590159e+10\n0.531\n0.033\n8.856\n0.460\n5.477\n...\nNaN\n0.110\n0.001\n0.001\n0.002\n0.0\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n47415 rows × 79 columns\n\n\n\n\nco2 = co2.loc[co2.year&gt;=2000]\nco2\n\n\n\n\n\n\n\n\ncountry\nyear\niso_code\npopulation\ngdp\ncement_co2\ncement_co2_per_capita\nco2\nco2_growth_abs\nco2_growth_prct\n...\nshare_global_other_co2\nshare_of_temperature_change_from_ghg\ntemperature_change_from_ch4\ntemperature_change_from_co2\ntemperature_change_from_ghg\ntemperature_change_from_n2o\ntotal_ghg\ntotal_ghg_excluding_lucf\ntrade_co2\ntrade_co2_share\n\n\n\n\n150\nAfghanistan\n2000\nAFG\n19542986.0\n1.128379e+10\n0.010\n0.001\n1.047\n-0.045\n-4.078\n...\nNaN\n0.079\n0.000\n0.000\n0.001\n0.0\n11.82\n14.21\nNaN\nNaN\n\n\n151\nAfghanistan\n2001\nAFG\n19688634.0\n1.102127e+10\n0.007\n0.000\n1.069\n0.022\n2.098\n...\nNaN\n0.078\n0.000\n0.000\n0.001\n0.0\n12.73\n12.60\nNaN\nNaN\n\n\n152\nAfghanistan\n2002\nAFG\n21000258.0\n1.880487e+10\n0.011\n0.001\n1.341\n0.272\n25.432\n...\nNaN\n0.078\n0.000\n0.000\n0.001\n0.0\n15.38\n15.26\nNaN\nNaN\n\n\n153\nAfghanistan\n2003\nAFG\n22645136.0\n2.107434e+10\n0.010\n0.000\n1.560\n0.219\n16.302\n...\nNaN\n0.077\n0.000\n0.000\n0.001\n0.0\n16.08\n15.96\nNaN\nNaN\n\n\n154\nAfghanistan\n2004\nAFG\n23553554.0\n2.233257e+10\n0.010\n0.000\n1.237\n-0.322\n-20.669\n...\nNaN\n0.077\n0.000\n0.000\n0.001\n0.0\n15.69\n15.57\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n47410\nZimbabwe\n2018\nZWE\n15052191.0\n2.678627e+10\n0.558\n0.037\n10.715\n1.419\n15.265\n...\nNaN\n0.114\n0.001\n0.001\n0.002\n0.0\n116.76\n29.37\n-0.088\n-0.825\n\n\n47411\nZimbabwe\n2019\nZWE\n15354606.0\n2.514642e+10\n0.473\n0.031\n9.775\n-0.939\n-8.765\n...\nNaN\n0.113\n0.001\n0.001\n0.002\n0.0\n116.03\n28.70\n0.143\n1.463\n\n\n47412\nZimbabwe\n2020\nZWE\n15669663.0\n2.317871e+10\n0.496\n0.032\n7.850\n-1.926\n-19.700\n...\nNaN\n0.112\n0.001\n0.001\n0.002\n0.0\n113.20\n25.99\n0.818\n10.421\n\n\n47413\nZimbabwe\n2021\nZWE\n15993525.0\n2.514009e+10\n0.531\n0.033\n8.396\n0.547\n6.962\n...\nNaN\n0.110\n0.001\n0.001\n0.002\n0.0\nNaN\nNaN\n1.088\n12.956\n\n\n47414\nZimbabwe\n2022\nZWE\n16320539.0\n2.590159e+10\n0.531\n0.033\n8.856\n0.460\n5.477\n...\nNaN\n0.110\n0.001\n0.001\n0.002\n0.0\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n5888 rows × 79 columns\n\n\n\n\nco2[['co2','iso_code']].groupby('iso_code').sum().sort_values(by='co2',ascending=False).head(10)\n\n\n\n\n\n\n\n\nco2\n\n\niso_code\n\n\n\n\n\nCHN\n188544.441\n\n\nUSA\n128562.231\n\n\nIND\n41804.773\n\n\nRUS\n37243.672\n\n\nJPN\n27995.696\n\n\nDEU\n18652.725\n\n\nKOR\n13109.904\n\n\nCAN\n12991.416\n\n\nIRN\n12860.067\n\n\nSAU\n11929.307\n\n\n\n\n\n\n\n\ntop_10 = co2[['co2','iso_code']].groupby('iso_code').sum().sort_values(by='co2',ascending=False).head(10).index\ntop_10\n\nIndex(['CHN', 'USA', 'IND', 'RUS', 'JPN', 'DEU', 'KOR', 'CAN', 'IRN', 'SAU'], dtype='object', name='iso_code')\n\n\n\nco2_tabla_paises = co2.pivot_table(values='co2',index='iso_code',columns='year',aggfunc='sum')\nco2_tabla_paises.loc[top_10]\n\n\n\n\n\n\n\nyear\n2000\n2001\n2002\n2003\n2004\n2005\n2006\n2007\n2008\n2009\n...\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n2022\n\n\niso_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCHN\n3649.201\n3728.513\n4103.042\n4841.119\n5217.351\n5882.143\n6494.338\n6983.577\n7501.498\n7891.089\n...\n9956.376\n9998.674\n9866.951\n9765.029\n10011.151\n10353.935\n10721.042\n10914.012\n11336.233\n11396.777\n\n\nUSA\n6010.136\n5907.740\n5946.308\n6010.146\n6112.655\n6132.183\n6052.686\n6130.123\n5915.119\n5480.726\n...\n5480.157\n5528.681\n5376.473\n5252.932\n5212.162\n5377.797\n5262.145\n4714.628\n5032.213\n5057.304\n\n\nIND\n977.526\n990.970\n1021.664\n1059.160\n1125.096\n1185.674\n1292.485\n1392.506\n1489.437\n1612.216\n...\n1995.098\n2148.344\n2234.219\n2354.658\n2426.607\n2593.058\n2612.888\n2421.552\n2674.222\n2829.644\n\n\nRUS\n1479.142\n1515.647\n1506.788\n1537.018\n1543.957\n1562.577\n1623.002\n1623.781\n1652.064\n1545.034\n...\n1640.437\n1639.959\n1638.675\n1634.885\n1666.121\n1712.494\n1705.031\n1632.929\n1711.993\n1652.177\n\n\nJPN\n1263.755\n1249.162\n1278.787\n1287.292\n1282.686\n1290.145\n1267.118\n1302.837\n1232.014\n1163.057\n...\n1315.192\n1264.072\n1223.169\n1202.454\n1186.802\n1141.669\n1104.540\n1039.796\n1062.129\n1053.798\n\n\nDEU\n898.938\n915.242\n898.835\n899.858\n885.633\n865.471\n877.498\n850.230\n852.858\n788.286\n...\n833.804\n794.738\n798.085\n801.745\n785.986\n754.811\n707.491\n647.252\n678.799\n665.605\n\n\nKOR\n439.981\n455.631\n476.065\n485.213\n491.389\n498.688\n503.478\n521.709\n532.651\n537.820\n...\n634.581\n629.366\n634.177\n637.914\n654.537\n670.169\n646.102\n597.634\n616.075\n600.999\n\n\nCAN\n567.096\n559.147\n564.374\n581.427\n579.689\n574.764\n568.585\n593.755\n576.809\n544.140\n...\n569.540\n566.353\n570.680\n557.690\n566.652\n577.066\n578.588\n522.845\n537.174\n547.944\n\n\nIRN\n364.302\n386.158\n393.410\n407.077\n437.679\n462.003\n496.070\n502.565\n522.557\n536.605\n...\n597.952\n632.673\n631.581\n633.827\n685.401\n710.215\n694.667\n679.007\n688.076\n690.635\n\n\nSAU\n302.328\n302.703\n331.980\n333.991\n401.013\n402.848\n439.117\n394.103\n440.344\n473.215\n...\n544.564\n612.842\n678.849\n697.420\n680.854\n686.896\n707.125\n610.773\n631.437\n662.549\n\n\n\n\n10 rows × 23 columns\n\n\n\n\nfig = px.imshow(\n    co2_tabla_paises.loc[top_10],\n    color_continuous_scale='jet',    \n    aspect='auto',\n)\nfig.show()",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Pivot table</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/029_pivot_table.html#ejercicios-sugeridos",
    "href": "notebooks/semanaTres/029_pivot_table.html#ejercicios-sugeridos",
    "title": "30  Pivot table",
    "section": "Ejercicios sugeridos:",
    "text": "Ejercicios sugeridos:\n\nHaz una gráfica con los valores máximos horarios para la To y Radiación global (Ig)\nRepite la gráfica de To usando matplotlib para que compares la diferencia en el código\nHaz una gráfica del cambio porcentual para visualizar el co2_per_capita",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Pivot table</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/030_update_dataframe.html",
    "href": "notebooks/semanaTres/030_update_dataframe.html",
    "title": "31  Actualiza dataframes",
    "section": "",
    "text": "import pandas as pd\nimport plotly.graph_objects as go\nimport numpy as np\n\n\nf = '../../data/Temixco_2018_10Min.parquet'\ntmx = pd.read_parquet(f)\nstart_date = '2018-03-01'\nend_date = '2018-03-14'  # Esto cubre dos semanas completas\n\ntmx.loc[start_date:end_date, 'To'] = np.nan\n\ntmx.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 52560 entries, 2018-01-01 00:00:00 to 2018-12-31 23:50:00\nData columns (total 7 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   Ib      52423 non-null  float64\n 1   Ig      52423 non-null  float64\n 2   To      50544 non-null  float64\n 3   RH      52560 non-null  float64\n 4   WS      52560 non-null  float64\n 5   WD      52560 non-null  float64\n 6   P       52560 non-null  float64\ndtypes: float64(7)\nmemory usage: 5.2 MB\n\n\n\nf = '../../data/update.parquet'\nnuevo = pd.read_parquet(f)\nnuevo.index\n\nDatetimeIndex(['2018-03-01 00:00:00', '2018-03-01 00:10:00',\n               '2018-03-01 00:20:00', '2018-03-01 00:30:00',\n               '2018-03-01 00:40:00', '2018-03-01 00:50:00',\n               '2018-03-01 01:00:00', '2018-03-01 01:10:00',\n               '2018-03-01 01:20:00', '2018-03-01 01:30:00',\n               ...\n               '2018-03-31 22:20:00', '2018-03-31 22:30:00',\n               '2018-03-31 22:40:00', '2018-03-31 22:50:00',\n               '2018-03-31 23:00:00', '2018-03-31 23:10:00',\n               '2018-03-31 23:20:00', '2018-03-31 23:30:00',\n               '2018-03-31 23:40:00', '2018-03-31 23:50:00'],\n              dtype='datetime64[ns]', name='time', length=4464, freq=None)\n\n\n\ntmx\n\n\n\n\n\n\n\n\nIb\nIg\nTo\nRH\nWS\nWD\nP\n\n\ntime\n\n\n\n\n\n\n\n\n\n\n\n2018-01-01 00:00:00\nNaN\nNaN\n18.70\n36.34\n1.422\n316.0\n87864.11\n\n\n2018-01-01 00:10:00\n0.002\n0.0\n18.95\n35.29\n1.008\n283.7\n87876.37\n\n\n2018-01-01 00:20:00\n0.170\n0.0\n18.94\n35.43\n1.565\n326.0\n87888.64\n\n\n2018-01-01 00:30:00\n0.371\n0.0\n18.77\n35.89\n2.175\n354.5\n87887.21\n\n\n2018-01-01 00:40:00\n0.305\n0.0\n18.81\n36.34\n1.902\n348.0\n87886.91\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2018-12-31 23:10:00\n0.125\n0.0\n18.51\n47.29\n1.715\n332.2\n87484.32\n\n\n2018-12-31 23:20:00\n0.000\n0.0\n18.26\n48.02\n1.703\n320.5\n87470.70\n\n\n2018-12-31 23:30:00\n0.044\n0.0\n18.39\n46.84\n2.887\n335.7\n87455.03\n\n\n2018-12-31 23:40:00\n0.170\n0.0\n17.99\n47.85\n1.528\n358.8\n87470.02\n\n\n2018-12-31 23:50:00\n0.003\n0.0\n17.75\n49.65\n0.598\n322.3\n87467.29\n\n\n\n\n52560 rows × 7 columns\n\n\n\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(x=tmx.index, y=tmx.To,name='To')\n)\n\n\nfig.show()\n\n                                                \n\n\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(x=tmx.index, y=tmx.To,name='To')\n)\nfig.add_trace(\n    go.Scatter(x=nuevo.index, y=nuevo.To,name='To_n')\n)\n\n\nfig.show()\n\n                                                \n\n\n\ntmx2 = tmx.copy()\ntmx2.update({'To':nuevo.To})\n\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(x=tmx.index, y=tmx.To,name='To_viejo')\n)\nfig.add_trace(\n    go.Scatter(x=tmx2.index, y=tmx2.To,name='To_nuevo')\n)\n\nfig.add_trace(\n    go.Scatter(x=nuevo.index, y=nuevo.To,name='To_reemplazado')\n)\n\n\nfig.show()",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Actualiza dataframes</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/032_join_merge_concat.html",
    "href": "notebooks/semanaTres/032_join_merge_concat.html",
    "title": "32  Unión de dataframes",
    "section": "",
    "text": "Para aprender más:",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Unión de dataframes</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/032_join_merge_concat.html#para-aprender-más",
    "href": "notebooks/semanaTres/032_join_merge_concat.html#para-aprender-más",
    "title": "32  Unión de dataframes",
    "section": "",
    "text": "Revisa las opciones de left, right en merge\nRevisa las opciones de on y how en join\nRevisa las opciones de ignore_index, join en concat\nAverigua que pasa cuando faltan datos en alguna de las series o dataframes",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Unión de dataframes</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/033_datos_faltantes.html",
    "href": "notebooks/semanaTres/033_datos_faltantes.html",
    "title": "33  Datos faltantes",
    "section": "",
    "text": "import pandas as pd\nimport plotly.express as px\nimport numpy as np\n\n\nThe Kernel crashed while executing code in the current cell or a previous cell. \n\nPlease review the code in the cell(s) to identify a possible cause of the failure. \n\nClick &lt;a href='https://aka.ms/vscodeJupyterKernelCrash'&gt;here&lt;/a&gt; for more info. \n\nView Jupyter &lt;a href='command:jupyter.viewOutput'&gt;log&lt;/a&gt; for further details.\n\n\n\n\n# f = '../../data/Temixco_2018_10Min.parquet'\n# tmx = pd.read_parquet(f)\n\n# start_date = '2018-03-30'\n# end_date = '2018-03-31' \n# # Seleccionar las filas del rango de fechas\n# selected_rows = tmx.loc[start_date:end_date]\n\n# # Crear un patrón para eliminar 6 filas seguidas y dejar una\n# pattern = []\n# for i in range(len(selected_rows)):\n#     if (i % 7) != 6:  # Mantener solo el séptimo elemento\n#         pattern.append(True)\n#     else:\n#         pattern.extend([False] * 6)\n\n# # Asegurarse de que el patrón no exceda el tamaño de las filas seleccionadas\n# pattern = pattern[:len(selected_rows)]\n\n# # Aplicar el patrón\n# indices_to_drop = selected_rows[pattern].index\n# tmx.drop(indices_to_drop, inplace=True)\n\n# start_date = '2018-03-07'\n# end_date = '2018-03-14'  # Esto cubre dos semanas completas\n# tmx.loc[start_date:end_date, 'To'] = np.nan\n\n# tmx = tmx.loc['2018-03']\n\n# tmx.to_parquet('../../data/Temixco_2018_Marzo_10Min_NaN.parquet')\n\n\nf = '../../data/Temixco_2018_Marzo_10Min_NaN.parquet'\ntmx = pd.read_parquet(f)\ntmx.info()\n\n\nThe Kernel crashed while executing code in the current cell or a previous cell. \n\nPlease review the code in the cell(s) to identify a possible cause of the failure. \n\nClick &lt;a href='https://aka.ms/vscodeJupyterKernelCrash'&gt;here&lt;/a&gt; for more info. \n\nView Jupyter &lt;a href='command:jupyter.viewOutput'&gt;log&lt;/a&gt; for further details.\n\n\n\n\ntmx.isna().sum()\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[1], line 1\n----&gt; 1 tmx.isna().sum()\n\nNameError: name 'tmx' is not defined\n\n\n\n\npx.scatter(tmx,x=tmx.index,y='To') # Nota los datos faltantes a finales de marzo\n\n                                                \n\n\n\ntmx_ffill = tmx['To'].ffill().reset_index()\ntmx_ffill['type'] = 'ffill'\n\ntmx_bfill = tmx['To'].bfill().reset_index()\ntmx_bfill['type'] = 'bfill'\n\ntmx_combinado = pd.concat([tmx_ffill,tmx_bfill])\n\npx.scatter(tmx_combinado, x = 'time', y = 'To',color='type')\n\n                                                \n\n\n\ntmx['To'].loc['2018-03-31 1:50':]\n\ntime\n2018-03-31 01:50:00    21.67\n2018-03-31 03:00:00    19.83\n2018-03-31 03:10:00    19.63\n2018-03-31 03:20:00    19.20\n2018-03-31 03:30:00    18.97\n                       ...  \n2018-03-31 23:10:00    24.24\n2018-03-31 23:20:00    24.35\n2018-03-31 23:30:00    24.32\n2018-03-31 23:40:00    24.06\n2018-03-31 23:50:00    24.00\nName: To, Length: 67, dtype: float64\n\n\n\npx.scatter(\n    tmx['To'].interpolate(method='time').reset_index(),\n    x = 'time',\n    y = 'To'\n)\n\n                                                \n\n\n\npx.scatter(\n    tmx['To'].resample('10Min').interpolate(method='time').reset_index(),\n    x = 'time',\n    y = 'To'\n)",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Datos faltantes</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaTres/034a_zonas_horarias.html",
    "href": "notebooks/semanaTres/034a_zonas_horarias.html",
    "title": "34  Zonas horarias",
    "section": "",
    "text": "import pandas as pd\nimport plotly.express as  px\nimport matplotlib.pyplot as plt\nimport pytz\nfrom datetime import datetime\n\n\n\npytz.all_timezones\n\n['Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', 'Africa/Asmara', 'Africa/Asmera', 'Africa/Bamako', 'Africa/Bangui', 'Africa/Banjul', 'Africa/Bissau', 'Africa/Blantyre', 'Africa/Brazzaville', 'Africa/Bujumbura', 'Africa/Cairo', 'Africa/Casablanca', 'Africa/Ceuta', 'Africa/Conakry', 'Africa/Dakar', 'Africa/Dar_es_Salaam', 'Africa/Djibouti', 'Africa/Douala', 'Africa/El_Aaiun', 'Africa/Freetown', 'Africa/Gaborone', 'Africa/Harare', 'Africa/Johannesburg', 'Africa/Juba', 'Africa/Kampala', 'Africa/Khartoum', 'Africa/Kigali', 'Africa/Kinshasa', 'Africa/Lagos', 'Africa/Libreville', 'Africa/Lome', 'Africa/Luanda', 'Africa/Lubumbashi', 'Africa/Lusaka', 'Africa/Malabo', 'Africa/Maputo', 'Africa/Maseru', 'Africa/Mbabane', 'Africa/Mogadishu', 'Africa/Monrovia', 'Africa/Nairobi', 'Africa/Ndjamena', 'Africa/Niamey', 'Africa/Nouakchott', 'Africa/Ouagadougou', 'Africa/Porto-Novo', 'Africa/Sao_Tome', 'Africa/Timbuktu', 'Africa/Tripoli', 'Africa/Tunis', 'Africa/Windhoek', 'America/Adak', 'America/Anchorage', 'America/Anguilla', 'America/Antigua', 'America/Araguaina', 'America/Argentina/Buenos_Aires', 'America/Argentina/Catamarca', 'America/Argentina/ComodRivadavia', 'America/Argentina/Cordoba', 'America/Argentina/Jujuy', 'America/Argentina/La_Rioja', 'America/Argentina/Mendoza', 'America/Argentina/Rio_Gallegos', 'America/Argentina/Salta', 'America/Argentina/San_Juan', 'America/Argentina/San_Luis', 'America/Argentina/Tucuman', 'America/Argentina/Ushuaia', 'America/Aruba', 'America/Asuncion', 'America/Atikokan', 'America/Atka', 'America/Bahia', 'America/Bahia_Banderas', 'America/Barbados', 'America/Belem', 'America/Belize', 'America/Blanc-Sablon', 'America/Boa_Vista', 'America/Bogota', 'America/Boise', 'America/Buenos_Aires', 'America/Cambridge_Bay', 'America/Campo_Grande', 'America/Cancun', 'America/Caracas', 'America/Catamarca', 'America/Cayenne', 'America/Cayman', 'America/Chicago', 'America/Chihuahua', 'America/Ciudad_Juarez', 'America/Coral_Harbour', 'America/Cordoba', 'America/Costa_Rica', 'America/Creston', 'America/Cuiaba', 'America/Curacao', 'America/Danmarkshavn', 'America/Dawson', 'America/Dawson_Creek', 'America/Denver', 'America/Detroit', 'America/Dominica', 'America/Edmonton', 'America/Eirunepe', 'America/El_Salvador', 'America/Ensenada', 'America/Fort_Nelson', 'America/Fort_Wayne', 'America/Fortaleza', 'America/Glace_Bay', 'America/Godthab', 'America/Goose_Bay', 'America/Grand_Turk', 'America/Grenada', 'America/Guadeloupe', 'America/Guatemala', 'America/Guayaquil', 'America/Guyana', 'America/Halifax', 'America/Havana', 'America/Hermosillo', 'America/Indiana/Indianapolis', 'America/Indiana/Knox', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Tell_City', 'America/Indiana/Vevay', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Indianapolis', 'America/Inuvik', 'America/Iqaluit', 'America/Jamaica', 'America/Jujuy', 'America/Juneau', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Knox_IN', 'America/Kralendijk', 'America/La_Paz', 'America/Lima', 'America/Los_Angeles', 'America/Louisville', 'America/Lower_Princes', 'America/Maceio', 'America/Managua', 'America/Manaus', 'America/Marigot', 'America/Martinique', 'America/Matamoros', 'America/Mazatlan', 'America/Mendoza', 'America/Menominee', 'America/Merida', 'America/Metlakatla', 'America/Mexico_City', 'America/Miquelon', 'America/Moncton', 'America/Monterrey', 'America/Montevideo', 'America/Montreal', 'America/Montserrat', 'America/Nassau', 'America/New_York', 'America/Nipigon', 'America/Nome', 'America/Noronha', 'America/North_Dakota/Beulah', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/Nuuk', 'America/Ojinaga', 'America/Panama', 'America/Pangnirtung', 'America/Paramaribo', 'America/Phoenix', 'America/Port-au-Prince', 'America/Port_of_Spain', 'America/Porto_Acre', 'America/Porto_Velho', 'America/Puerto_Rico', 'America/Punta_Arenas', 'America/Rainy_River', 'America/Rankin_Inlet', 'America/Recife', 'America/Regina', 'America/Resolute', 'America/Rio_Branco', 'America/Rosario', 'America/Santa_Isabel', 'America/Santarem', 'America/Santiago', 'America/Santo_Domingo', 'America/Sao_Paulo', 'America/Scoresbysund', 'America/Shiprock', 'America/Sitka', 'America/St_Barthelemy', 'America/St_Johns', 'America/St_Kitts', 'America/St_Lucia', 'America/St_Thomas', 'America/St_Vincent', 'America/Swift_Current', 'America/Tegucigalpa', 'America/Thule', 'America/Thunder_Bay', 'America/Tijuana', 'America/Toronto', 'America/Tortola', 'America/Vancouver', 'America/Virgin', 'America/Whitehorse', 'America/Winnipeg', 'America/Yakutat', 'America/Yellowknife', 'Antarctica/Casey', 'Antarctica/Davis', 'Antarctica/DumontDUrville', 'Antarctica/Macquarie', 'Antarctica/Mawson', 'Antarctica/McMurdo', 'Antarctica/Palmer', 'Antarctica/Rothera', 'Antarctica/South_Pole', 'Antarctica/Syowa', 'Antarctica/Troll', 'Antarctica/Vostok', 'Arctic/Longyearbyen', 'Asia/Aden', 'Asia/Almaty', 'Asia/Amman', 'Asia/Anadyr', 'Asia/Aqtau', 'Asia/Aqtobe', 'Asia/Ashgabat', 'Asia/Ashkhabad', 'Asia/Atyrau', 'Asia/Baghdad', 'Asia/Bahrain', 'Asia/Baku', 'Asia/Bangkok', 'Asia/Barnaul', 'Asia/Beirut', 'Asia/Bishkek', 'Asia/Brunei', 'Asia/Calcutta', 'Asia/Chita', 'Asia/Choibalsan', 'Asia/Chongqing', 'Asia/Chungking', 'Asia/Colombo', 'Asia/Dacca', 'Asia/Damascus', 'Asia/Dhaka', 'Asia/Dili', 'Asia/Dubai', 'Asia/Dushanbe', 'Asia/Famagusta', 'Asia/Gaza', 'Asia/Harbin', 'Asia/Hebron', 'Asia/Ho_Chi_Minh', 'Asia/Hong_Kong', 'Asia/Hovd', 'Asia/Irkutsk', 'Asia/Istanbul', 'Asia/Jakarta', 'Asia/Jayapura', 'Asia/Jerusalem', 'Asia/Kabul', 'Asia/Kamchatka', 'Asia/Karachi', 'Asia/Kashgar', 'Asia/Kathmandu', 'Asia/Katmandu', 'Asia/Khandyga', 'Asia/Kolkata', 'Asia/Krasnoyarsk', 'Asia/Kuala_Lumpur', 'Asia/Kuching', 'Asia/Kuwait', 'Asia/Macao', 'Asia/Macau', 'Asia/Magadan', 'Asia/Makassar', 'Asia/Manila', 'Asia/Muscat', 'Asia/Nicosia', 'Asia/Novokuznetsk', 'Asia/Novosibirsk', 'Asia/Omsk', 'Asia/Oral', 'Asia/Phnom_Penh', 'Asia/Pontianak', 'Asia/Pyongyang', 'Asia/Qatar', 'Asia/Qostanay', 'Asia/Qyzylorda', 'Asia/Rangoon', 'Asia/Riyadh', 'Asia/Saigon', 'Asia/Sakhalin', 'Asia/Samarkand', 'Asia/Seoul', 'Asia/Shanghai', 'Asia/Singapore', 'Asia/Srednekolymsk', 'Asia/Taipei', 'Asia/Tashkent', 'Asia/Tbilisi', 'Asia/Tehran', 'Asia/Tel_Aviv', 'Asia/Thimbu', 'Asia/Thimphu', 'Asia/Tokyo', 'Asia/Tomsk', 'Asia/Ujung_Pandang', 'Asia/Ulaanbaatar', 'Asia/Ulan_Bator', 'Asia/Urumqi', 'Asia/Ust-Nera', 'Asia/Vientiane', 'Asia/Vladivostok', 'Asia/Yakutsk', 'Asia/Yangon', 'Asia/Yekaterinburg', 'Asia/Yerevan', 'Atlantic/Azores', 'Atlantic/Bermuda', 'Atlantic/Canary', 'Atlantic/Cape_Verde', 'Atlantic/Faeroe', 'Atlantic/Faroe', 'Atlantic/Jan_Mayen', 'Atlantic/Madeira', 'Atlantic/Reykjavik', 'Atlantic/South_Georgia', 'Atlantic/St_Helena', 'Atlantic/Stanley', 'Australia/ACT', 'Australia/Adelaide', 'Australia/Brisbane', 'Australia/Broken_Hill', 'Australia/Canberra', 'Australia/Currie', 'Australia/Darwin', 'Australia/Eucla', 'Australia/Hobart', 'Australia/LHI', 'Australia/Lindeman', 'Australia/Lord_Howe', 'Australia/Melbourne', 'Australia/NSW', 'Australia/North', 'Australia/Perth', 'Australia/Queensland', 'Australia/South', 'Australia/Sydney', 'Australia/Tasmania', 'Australia/Victoria', 'Australia/West', 'Australia/Yancowinna', 'Brazil/Acre', 'Brazil/DeNoronha', 'Brazil/East', 'Brazil/West', 'CET', 'CST6CDT', 'Canada/Atlantic', 'Canada/Central', 'Canada/Eastern', 'Canada/Mountain', 'Canada/Newfoundland', 'Canada/Pacific', 'Canada/Saskatchewan', 'Canada/Yukon', 'Chile/Continental', 'Chile/EasterIsland', 'Cuba', 'EET', 'EST', 'EST5EDT', 'Egypt', 'Eire', 'Etc/GMT', 'Etc/GMT+0', 'Etc/GMT+1', 'Etc/GMT+10', 'Etc/GMT+11', 'Etc/GMT+12', 'Etc/GMT+2', 'Etc/GMT+3', 'Etc/GMT+4', 'Etc/GMT+5', 'Etc/GMT+6', 'Etc/GMT+7', 'Etc/GMT+8', 'Etc/GMT+9', 'Etc/GMT-0', 'Etc/GMT-1', 'Etc/GMT-10', 'Etc/GMT-11', 'Etc/GMT-12', 'Etc/GMT-13', 'Etc/GMT-14', 'Etc/GMT-2', 'Etc/GMT-3', 'Etc/GMT-4', 'Etc/GMT-5', 'Etc/GMT-6', 'Etc/GMT-7', 'Etc/GMT-8', 'Etc/GMT-9', 'Etc/GMT0', 'Etc/Greenwich', 'Etc/UCT', 'Etc/UTC', 'Etc/Universal', 'Etc/Zulu', 'Europe/Amsterdam', 'Europe/Andorra', 'Europe/Astrakhan', 'Europe/Athens', 'Europe/Belfast', 'Europe/Belgrade', 'Europe/Berlin', 'Europe/Bratislava', 'Europe/Brussels', 'Europe/Bucharest', 'Europe/Budapest', 'Europe/Busingen', 'Europe/Chisinau', 'Europe/Copenhagen', 'Europe/Dublin', 'Europe/Gibraltar', 'Europe/Guernsey', 'Europe/Helsinki', 'Europe/Isle_of_Man', 'Europe/Istanbul', 'Europe/Jersey', 'Europe/Kaliningrad', 'Europe/Kiev', 'Europe/Kirov', 'Europe/Kyiv', 'Europe/Lisbon', 'Europe/Ljubljana', 'Europe/London', 'Europe/Luxembourg', 'Europe/Madrid', 'Europe/Malta', 'Europe/Mariehamn', 'Europe/Minsk', 'Europe/Monaco', 'Europe/Moscow', 'Europe/Nicosia', 'Europe/Oslo', 'Europe/Paris', 'Europe/Podgorica', 'Europe/Prague', 'Europe/Riga', 'Europe/Rome', 'Europe/Samara', 'Europe/San_Marino', 'Europe/Sarajevo', 'Europe/Saratov', 'Europe/Simferopol', 'Europe/Skopje', 'Europe/Sofia', 'Europe/Stockholm', 'Europe/Tallinn', 'Europe/Tirane', 'Europe/Tiraspol', 'Europe/Ulyanovsk', 'Europe/Uzhgorod', 'Europe/Vaduz', 'Europe/Vatican', 'Europe/Vienna', 'Europe/Vilnius', 'Europe/Volgograd', 'Europe/Warsaw', 'Europe/Zagreb', 'Europe/Zaporozhye', 'Europe/Zurich', 'GB', 'GB-Eire', 'GMT', 'GMT+0', 'GMT-0', 'GMT0', 'Greenwich', 'HST', 'Hongkong', 'Iceland', 'Indian/Antananarivo', 'Indian/Chagos', 'Indian/Christmas', 'Indian/Cocos', 'Indian/Comoro', 'Indian/Kerguelen', 'Indian/Mahe', 'Indian/Maldives', 'Indian/Mauritius', 'Indian/Mayotte', 'Indian/Reunion', 'Iran', 'Israel', 'Jamaica', 'Japan', 'Kwajalein', 'Libya', 'MET', 'MST', 'MST7MDT', 'Mexico/BajaNorte', 'Mexico/BajaSur', 'Mexico/General', 'NZ', 'NZ-CHAT', 'Navajo', 'PRC', 'PST8PDT', 'Pacific/Apia', 'Pacific/Auckland', 'Pacific/Bougainville', 'Pacific/Chatham', 'Pacific/Chuuk', 'Pacific/Easter', 'Pacific/Efate', 'Pacific/Enderbury', 'Pacific/Fakaofo', 'Pacific/Fiji', 'Pacific/Funafuti', 'Pacific/Galapagos', 'Pacific/Gambier', 'Pacific/Guadalcanal', 'Pacific/Guam', 'Pacific/Honolulu', 'Pacific/Johnston', 'Pacific/Kanton', 'Pacific/Kiritimati', 'Pacific/Kosrae', 'Pacific/Kwajalein', 'Pacific/Majuro', 'Pacific/Marquesas', 'Pacific/Midway', 'Pacific/Nauru', 'Pacific/Niue', 'Pacific/Norfolk', 'Pacific/Noumea', 'Pacific/Pago_Pago', 'Pacific/Palau', 'Pacific/Pitcairn', 'Pacific/Pohnpei', 'Pacific/Ponape', 'Pacific/Port_Moresby', 'Pacific/Rarotonga', 'Pacific/Saipan', 'Pacific/Samoa', 'Pacific/Tahiti', 'Pacific/Tarawa', 'Pacific/Tongatapu', 'Pacific/Truk', 'Pacific/Wake', 'Pacific/Wallis', 'Pacific/Yap', 'Poland', 'Portugal', 'ROC', 'ROK', 'Singapore', 'Turkey', 'UCT', 'US/Alaska', 'US/Aleutian', 'US/Arizona', 'US/Central', 'US/East-Indiana', 'US/Eastern', 'US/Hawaii', 'US/Indiana-Starke', 'US/Michigan', 'US/Mountain', 'US/Pacific', 'US/Samoa', 'UTC', 'Universal', 'W-SU', 'WET', 'Zulu']\n\n\n\nzonas_horarias = pytz.all_timezones\n[zona for zona in zonas_horarias if 'Mexico' in zona]\n\n['America/Mexico_City', 'Mexico/BajaNorte', 'Mexico/BajaSur', 'Mexico/General']\n\n\n\nhorario =  pd.date_range('2024-01-01', '2024-01-31',freq='10Min' , tz='America/Mexico_City')\nhorario\n\nDatetimeIndex(['2024-01-01 00:00:00-06:00', '2024-01-01 00:10:00-06:00',\n               '2024-01-01 00:20:00-06:00', '2024-01-01 00:30:00-06:00',\n               '2024-01-01 00:40:00-06:00', '2024-01-01 00:50:00-06:00',\n               '2024-01-01 01:00:00-06:00', '2024-01-01 01:10:00-06:00',\n               '2024-01-01 01:20:00-06:00', '2024-01-01 01:30:00-06:00',\n               ...\n               '2024-01-30 22:30:00-06:00', '2024-01-30 22:40:00-06:00',\n               '2024-01-30 22:50:00-06:00', '2024-01-30 23:00:00-06:00',\n               '2024-01-30 23:10:00-06:00', '2024-01-30 23:20:00-06:00',\n               '2024-01-30 23:30:00-06:00', '2024-01-30 23:40:00-06:00',\n               '2024-01-30 23:50:00-06:00', '2024-01-31 00:00:00-06:00'],\n              dtype='datetime64[ns, America/Mexico_City]', length=4321, freq='10min')\n\n\n\ntimezone = pytz.timezone('America/Mexico_City')\nhorario =  pd.date_range('2024-01-01', '2024-01-31',freq='10Min' , tz=timezone)\nhorario\n\nDatetimeIndex(['2024-01-01 00:00:00-06:00', '2024-01-01 00:10:00-06:00',\n               '2024-01-01 00:20:00-06:00', '2024-01-01 00:30:00-06:00',\n               '2024-01-01 00:40:00-06:00', '2024-01-01 00:50:00-06:00',\n               '2024-01-01 01:00:00-06:00', '2024-01-01 01:10:00-06:00',\n               '2024-01-01 01:20:00-06:00', '2024-01-01 01:30:00-06:00',\n               ...\n               '2024-01-30 22:30:00-06:00', '2024-01-30 22:40:00-06:00',\n               '2024-01-30 22:50:00-06:00', '2024-01-30 23:00:00-06:00',\n               '2024-01-30 23:10:00-06:00', '2024-01-30 23:20:00-06:00',\n               '2024-01-30 23:30:00-06:00', '2024-01-30 23:40:00-06:00',\n               '2024-01-30 23:50:00-06:00', '2024-01-31 00:00:00-06:00'],\n              dtype='datetime64[ns, America/Mexico_City]', length=4321, freq='10min')\n\n\n\ntimezone\n\n&lt;DstTzInfo 'America/Mexico_City' LMT-1 day, 17:23:00 STD&gt;\n\n\n\nf = '../../data/Temixco_2018_10Min.parquet'\ntmx = pd.read_parquet(f,columns=['time','To'])\ntmx = tmx.tz_localize(tz=timezone,ambiguous='NaT',nonexistent='NaT')\ntmx\n\n\n\n\n\n\n\n\nTo\n\n\ntime\n\n\n\n\n\n2018-01-01 00:00:00-06:00\n18.70\n\n\n2018-01-01 00:10:00-06:00\n18.95\n\n\n2018-01-01 00:20:00-06:00\n18.94\n\n\n2018-01-01 00:30:00-06:00\n18.77\n\n\n2018-01-01 00:40:00-06:00\n18.81\n\n\n...\n...\n\n\n2018-12-31 23:10:00-06:00\n18.51\n\n\n2018-12-31 23:20:00-06:00\n18.26\n\n\n2018-12-31 23:30:00-06:00\n18.39\n\n\n2018-12-31 23:40:00-06:00\n17.99\n\n\n2018-12-31 23:50:00-06:00\n17.75\n\n\n\n\n52560 rows × 1 columns\n\n\n\n\npx.scatter(tmx.reset_index(), x = 'time',y = 'To')\n\n                                                \n\n\n\n\n# Crear un objeto datetime sin información de zona horaria\nhora = datetime(2002, 10, 27, 6, 0, 0)\n\n# Localizar la fecha y hora en 'US/Eastern'\neastern = pytz.timezone('US/Eastern')\nloc_dt = eastern.localize(hora)\nloc_dt\n\ndatetime.datetime(2002, 10, 27, 6, 0, tzinfo=&lt;DstTzInfo 'US/Eastern' EST-1 day, 19:00:00 STD&gt;)\n\n\n\n# Convertir la fecha y hora localizada a 'Europe/Amsterdam'\namsterdam = pytz.timezone('Europe/Amsterdam')\nams_dt = loc_dt.astimezone(amsterdam)\n\n# Formato de impresión\nfmt = '%Y-%m-%d %H:%M:%S %Z%z'\n\n# Imprimir las fechas y horas en ambas zonas horarias\nprint(loc_dt.strftime(fmt))\nprint(ams_dt.strftime(fmt))\n\n2002-10-27 06:00:00 EST-0500\n2002-10-27 12:00:00 CET+0100",
    "crumbs": [
      "Semana Tres",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Zonas horarias</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaCuatro/035_EjecutaLibretas.html",
    "href": "notebooks/semanaCuatro/035_EjecutaLibretas.html",
    "title": "35  Ejecuta libretas desde la terminal",
    "section": "",
    "text": "# pip install papermill\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\nf = '../data/Temixco_2018_10Min.parquet'\ntmx = pd.read_parquet(f)\n\n\ntmx_latex = tmx.mean().to_latex()\ntmx_latex\n\n'\\\\begin{tabular}{lr}\\n\\\\toprule\\n & 0 \\\\\\\\\\n\\\\midrule\\nIb & 236.742726 \\\\\\\\\\nIg & 257.414344 \\\\\\\\\\nTo & 22.838098 \\\\\\\\\\nRH & 45.152827 \\\\\\\\\\nWS & 1.905200 \\\\\\\\\\nWD & 210.734453 \\\\\\\\\\nP & 87591.151598 \\\\\\\\\\n\\\\bottomrule\\n\\\\end{tabular}\\n'\n\n\n\nwith open('../../latex/tabla_promedios.tex', 'w') as file:\n    file.write(tmx_latex)",
    "crumbs": [
      "Semana Cuatro",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Ejecuta libretas desde la terminal</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaCuatro/037_PruebasUnitarias.html",
    "href": "notebooks/semanaCuatro/037_PruebasUnitarias.html",
    "title": "37  Pruebas unitarias",
    "section": "",
    "text": "import pandas as pd\nimport unittest\n\n\nclass PruebasDataFrame(unittest.TestCase):\n    \n    def setUp(self):\n        # Inicializar el DataFrame en el método setUp para que se ejecute antes de cada prueba\n        self.df = pd.read_parquet(self.f)\n    \n    def test_tamanio_dataframe(self):\n        # Tamaño esperado del DataFrame\n        tamanio_esperado = 52560\n        \n        # Verificar que el DataFrame tiene el tamaño esperado\n        tamanio_actual = len(self.df)\n        self.assertEqual(tamanio_actual, tamanio_esperado, \n                         f\"El DataFrame tiene {tamanio_actual} elementos, se esperaba {tamanio_esperado}\")\n\ndef run_tests(file_path):\n    # Establecer la variable de clase para el archivo a probar\n    PruebasDataFrame.f = file_path\n    \n    # Cargar y ejecutar el conjunto de pruebas\n    suite = unittest.TestLoader().loadTestsFromTestCase(PruebasDataFrame)\n    result = unittest.TextTestRunner().run(suite)\n    \n    # Devolver el resultado del test (True si pasó, False si falló)\n    return result.wasSuccessful()\n\n# Ruta del archivo Parquet\nfile_path = '../data/Temixco_2018_10Min.parquet'\n\n# Ejecutar las pruebas\nif run_tests(file_path):\n    print(\"Todas las pruebas pasaron exitosamente.\")\nelse:\n    print(\"Algunas pruebas fallaron.\")\n\n.\n----------------------------------------------------------------------\nRan 1 test in 0.047s\n\nOK\n\n\nTodas las pruebas pasaron exitosamente.",
    "crumbs": [
      "Semana Cuatro",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Pruebas unitarias</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaCuatro/039_QuartoLibreta.html",
    "href": "notebooks/semanaCuatro/039_QuartoLibreta.html",
    "title": "39  Temperatura e Irradiancia en Temixco, Morelos",
    "section": "",
    "text": "En Temixco, Mor. la temperatura ambiental \\(T_o\\) osciló aproximadamente entre los 8 y 32 \\(^oC\\) durante el 2018, como se puede ver en la Figura 40.1.\nBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla bla.\nBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla blaBla bla bla bla bla.\n\n\nCódigo\nfig, axs = plt.subplots(2,figsize=(10,3),sharex=True)\n\naxs[0].plot(tmx.To,label=\"To\")\n\naxs[1].plot(tmx.Ig,label=\"Ig\")\naxs[1].plot(tmx.Ib,label=\"Ib\")\n\nfor ax in axs:\n    ax.legend()\n\n\n\n\n\n\n\n\nFigura 39.1: Temperatura ambiente y radiación en Temixco, Morelos durante el 2018.\n\n\n\n\n\nPara obtener un documento html solo escribo:\nquarto render 039_QuartoLibreta.ipynb\nPara obtener un PDF\nquarto render 039_QuartoLibreta.ipynb --to pdf",
    "crumbs": [
      "Semana Cuatro",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Temperatura e Irradiancia en Temixco, Morelos</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python: De explorador de datos a analista",
    "section": "",
    "text": "Bienvenida\nSi ya eres una persona usuaria de Python y ya pasaste de Usuario a Explorador de datos, lo que sigue es que te conviertas en una persona experta analista con el curso MOOC Python: de explorador de datos a analista.\nPara esto hemos preparado un viaje de 4 semanas y un proyecto final para que practiques y puedas evaluar tu aprendizaje.\n\n\n¿Qué aprenderás?\nEl curso está organizado por cuatro grandes temas o semanas y un proyecto final, que son:\n\n\nInstalación y prácticas avanzadas\n\nBienvenida al curso • 1 minuto\nBienvenida a la semana 1 • 3 minutos\nInstala Python • 3 minutos\nIntroducción a Power Shell • 3 minutos\nEntornos virtuales • 6 minutos\nEspacio de trabajo • 5 minutos\nDesarrolla paquetes de Python • 8 minutos\nPropuestas de Mejora de Python • 4 minutos\nProgramación Orientada a Objetos • 5 minutos\nManejo de errores • 5 minutos\nDecoradores. Parte 1 • 6 minutos\nDecoradores. Parte 2 • 5 minutos\nDesempaquetado • 9 minutos\nFunciones lambda • 8 minutos\nOperador Walrus • 4 minutos\n1 tarea de programación\n\n\n\nExploratory data analysis avanzado\n\nBienvenida a la semana 2 • 3 minutos\nRepaso de Matplotlib • 8 minutos\nProgramación Orientada a Objetos en Matplotlib • 5 minutos\nDecoradores en Matplotlib • 7 minutos\nEstilos de gráficos en Matplotlib • 8 minutos\nGráficas interactivas • 3 minutos\nEstructuras de datos en OWD • 5 minutos\nIntroducción a Plotly • 6 minutos\nIntroducción a Bokeh • 7 minutos\nGramática de gráficos • 9 minutos\nDiferencias entre herramientas • 7 minutos\nDiferencias entre herramientas. Parte 2 • 11 minutos\n1 tarea de programación\n\n\n\nPandas avanzado\n\nBienvenida a la semana 3 • 2 minutos\nIntroducción a Pandas • 10 minutos\nPromedios móviles • 8 minutos\nFunciones para valores consecutivos • 6 minutos\nNuevos formatos de archivos • 4 minutos\nEl método groupby • 5 minutos\nMétodo pivot_table • 5 minutos\nCombinar dataframes • 8 minutos\nManejar datos faltantes • 10 minutos\nZonas horarias • 5 minutos\nZonas horarias. Parte 2 • 4 minutos\n1 tarea de programación\n\n\n\nNuevas herramientas en la ciencia de datos\n\nBienvenida a la semana 4 • 2 minutos\nEjecuta libretas • 4 minutos\nConvertir libretas a scripts • 6 minutos\nPruebas unitarias • 10 minutos\nIntroducción a Quarto • 2 minutos\nLibretas a reportes con Quarto • 7 minutos\nPresentaciones en Quarto • 11 minutos\nIntroducción a Shiny • 6 minutos\nBibliotecas para exploración de datos • 6 minutos\n1 tarea de programación\n\n\n\nProyecto final\nA través de estas 4 horas y 35 minutos repartidos en más de 40 videos, te llevaremos a sentar las bases para que pases de ser una persona exploradora a una analista de datos.\n\n\n\n\n\n\nEsta página no es un curso, contiene el material de ejercicios del curso MOOC Python: explorador de datos a analista, por lo que si aún no te has inscrito, te recomendamos hacerlo.\n\n\n\n\n\n\n\n\n\nSi estás arrancando desde cero, te recomendamos tomes el curso MOOC Python, de cero a usuario.\n\n\n\n\n\n\n\n\n\nSi ya sabes Python y quieres aprender Pandas, Matplotlib mediante el manejo de series temporales, te recomendamos tomes el curso MOOC Python, usuario a explorador de datos.",
    "crumbs": [
      "Bienvenida"
    ]
  },
  {
    "objectID": "uso.html",
    "href": "uso.html",
    "title": "Recomendaciones",
    "section": "",
    "text": "Bienvenido al repositorio del curso “De Explorador de Datos a Analista”, diseñado para ayudarte a desarrollar y mejorar tus habilidades en análisis de datos con Python. Este repositorio es parte integral del curso, y aquí encontrarás todos los recursos necesarios para completar las actividades y ejercicios propuestos.\nPara sacarle todo el provecho al MOOC Python: De explorador de datos a Analista, puedes usar este libro de ejercicios para complementar y profundizar en los conceptos y técnicas presentados en las clases. Este recurso está diseñado para maximizar tu aprendizaje y proporcionarte una experiencia práctica indispensable.\n\nEstructura del Repositorio\nEl repositorio está organizado de la siguiente manera:\n\nnotebooks/: Este directorio contiene todas las libretas de Jupyter utilizadas durante el curso. Cada libreta está diseñada para guiarte a través de los conceptos y técnicas presentados en cada módulo. Puedes explorar las libretas a tu propio ritmo y realizar los ejercicios prácticos para reforzar tu aprendizaje.\ndata/: Dentro de este folder, encontrarás todos los conjuntos de datos que necesitarás para completar los ejercicios del curso. Los datos están disponibles en formatos compatibles con las herramientas que usaremos, como pandas y otras bibliotecas de Python. Asegúrate de descargar estos archivos y familiarizarte con su estructura antes de comenzar las actividades.\n\n\n\nCómo Utilizar Este Repositorio\n\nClonar el Repositorio: Puedes clonar este repositorio en tu máquina local usando Git:\n\n   git clone https://github.com/AltamarMx/analista.git\n\nDescarga el repositorio comprimido \nHaz una copia (fork) del repositorio \nVisita el repositorio en línea El repositorio lo puedes ver en la liga https://github.com/AltamarMx/analista.\n\n\n\nExplorar las libretas\nLas libreta están organizadas de acuerdo al curso. Puedes desplegar los temas específicos en cada libreta para revisar o profundizar en áreas particulares de interés. Esta estructura modular te permite avanzar a tu propio ritmo y volver sobre temas según lo necesites solo con un vistazo.\n\n\nBúsqueda específica\nSi necesitas encontrar ejercicios que utilicen un comando específico de Python o aborden un concepto particular, utiliza la barra de búsqueda, ubicada en la parte superior derecha. Esto te permitirá cruzar toda la colección de libretas rápidamente, identificando ejemplos, explicaciones y problemas prácticos que hacen uso del comando o tema que quieres revisar. Esta función es ideal para estudiar funciones específicas, para la revisión de temas de interés en tus proyectos o para recordar esa configuración especial en algún comando.\n\n\n\nCopiar código fácilmente\nGracias a la integración con la tecnología de Quarto, copiar y pegar código de estas libretas es más sencillo que nunca. Simplemente con un clic sobre el bloque de código, este se copiará al portapapeles, facilitando la práctica y la implementación de lo aprendido en tus propios proyectos o ejercicios de prueba. Esto es especialmente útil para experimentar con variantes de los códigos proporcionados y para realizar tus propios ajustes y mejoras.\n   da click a la derecha  para copiar al portapapeles\n!Buen viaje de aprendizaje!",
    "crumbs": [
      "Recomendaciones"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/001_instala_python.html",
    "href": "notebooks/semanaUno/001_instala_python.html",
    "title": "2  Instala Python",
    "section": "",
    "text": "Hola, para iniciar este curso vamos a ver cómo instalar Python y Jupyter Notebook desde cero, descargando directamente de python.org.\nRealizar esto nos asegura una instalación sencilla y que podemos instalar la versión que deseemos y que podemos personalizar nuestra instalación según necesitemos.\n\nVe python.org, selecciona y descarga Python para instalar en tu sistema operativo. \nInstala y asegurate de marcar Add Python.exe to PATH \nAsegurate de Python funciona en tu PowerShell ejecutando python o py\n\nInstala jupyter notebook, pandas y matplotlib, recuerda hacerlo con python -m pip install jupyter notebook pandas matplotlib \nAbre una terminal nueva y prueba que funciona ejecutando jupyter notebook",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Instala Python</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/002_intro_powershell.html",
    "href": "notebooks/semanaUno/002_intro_powershell.html",
    "title": "3  Powershell y Python",
    "section": "",
    "text": "3.1 Navega entre directorios\nUsa ls para saber lo que hay en tu directorio:\nUsa cd Desktop para entrar al directorio Desktop,\nUsa ii . para lanzar el explorador de archivos en el folder en que te encuentras.",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Powershell y Python</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/002_intro_powershell.html#jupyter-notebook-desde-la-powershell",
    "href": "notebooks/semanaUno/002_intro_powershell.html#jupyter-notebook-desde-la-powershell",
    "title": "3  Powershell y Python",
    "section": "3.2 Jupyter notebook desde la PowerShell",
    "text": "3.2 Jupyter notebook desde la PowerShell\nEscribe jupyter notebook y lanzaras la libreta de Jupyter en el directorio en el que te encuentras:",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Powershell y Python</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/002_intro_powershell.html#tareas-sugeridas",
    "href": "notebooks/semanaUno/002_intro_powershell.html#tareas-sugeridas",
    "title": "3  Powershell y Python",
    "section": "3.3 Tareas sugeridas",
    "text": "3.3 Tareas sugeridas\n\nAbre tu PowerShell.\nCrea un directorio en tu home que se llame analista\nEntra a ese directorio con cd analista\nCrea tu espacio de trabajo creando dos folders mkdir data y mkdir notebooks\nLanza la libreta de jupyter con jupyter notebook\n!Feliz inicio de curso!",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Powershell y Python</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/003_venvs.html",
    "href": "notebooks/semanaUno/003_venvs.html",
    "title": "4  Entornos virtuales",
    "section": "",
    "text": "Un entorno virtual en Python es un espacio aislado que permite tener versiones específicas de Python y de paquetes instalados que son independientes de las instalaciones globales. Esto significa que puedes tener diferentes proyectos con sus propias versiones de paquetes y dependencias, sin que interfieran entre sí.\nAbre una PowerShell como administrador y ejecuta lo siguiente:\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned\nCuida de confirmar si a todo.\nCrea un directorio en tu home llamado venvs\nmkdir venvs\nEntra a venvs con:\ncd venvs\nCrea el ambiente virtual llamado mooc con:\npython -m venv mooc \nActiva el ambiente virtual desde tu home con\n.\\venvs\\mooc\\Script\\activate\\\nSe debe ver así: \nInstala pandas y matplotlib en el venv \nRegistra tus paquetes instalados en tu venv con\npython -m pip freeze &gt; requirements.txt\nReinstala tu ambiente virtual a partir de un requirements.txt\npip install -r requirements.txt\n\n\n\n\n\n\nTip\n\n\n\nEn Linux y MacOs los entornos virtuales se crean igual pero se activan con\nsource ~/venvs/mooc/bin/activate",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Entornos virtuales</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/004_espacio_trabajo_venv.html",
    "href": "notebooks/semanaUno/004_espacio_trabajo_venv.html",
    "title": "5  Espacio de trabajo",
    "section": "",
    "text": "Un espacio de trabajo es un conjunto de folders con una estructura y nombres que tienen una narrativa acorde a tu proyecto y nos ayuda a mantenerlos estructurados, propicia la reproducibilidad y facilita la colaboración.\nUn espacio de trabajo incial para mi se ve: \nCon Cookiecutter, podemos crear nuestro espacio automáticamente, siguiendo un modelo predefinido que garantiza que todos los elementos esenciales estén en su lugar desde el inicio.\nInstalar cookiecutter\npip install cookiecutter\nUsa cookiecutter para crear un espacio de trabajo\ncookiecutter.exe gh:altamarmx/cookiecutter_cienciadatos\nRevisar el espacio de trabajo creado\n\n\n\n\n\n\nNota\n\n\n\nPuedes revisar el repositorio que crea el espacio de trabajó en https://github.com/AltamarMx/cookiecutter_cienciadatos\n\n\n\n\n\n\n\n\nTip\n\n\n\nPuedes leer la documentación de Cookiecutter aquí",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Espacio de trabajo</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaUno/005_desarrolla_paquetes.html",
    "href": "notebooks/semanaUno/005_desarrolla_paquetes.html",
    "title": "6  Paquetes en Python",
    "section": "",
    "text": "Desarrollar paquetes localmente te permite modularizar y reutilizar tu código. Esto no solo hace tu código más organizado, sino también más fácil de mantener. Pero, ¿qué pasa cuando quieres compartir tu trabajo con el mundo o tu equipe de trabajo?\nAl subir tus paquetes a GitHub, permites que cualquiera los instale fácilmente con un simple comando y la dirección del repositorio.\nRevisa la estructura de un paquete de este repositorio https://github.com/AltamarMx/paquete_mooc\nEl archivo setup.py puede ser:\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='mi_paquete',\n    version='0.1.0',\n    packages=find_packages(),\n    description='Descripción breve del paquete',\n    author='Tu Nombre',\n    author_email='tu_email@example.com',\n    url='URL del repositorio de GitHub',\n    install_requires=[\n        # Lista de dependencias necesarias\n    ],\n)\n\n\n\n\n\n\nTip\n\n\n\nInstala el paquete del curso con:\npip install git+https://github.com/AltamarMx/paquete_mooc\n\n\n\n\n\n\n\n\nNota\n\n\n\nTambién puedes instalar desde una rama\npip install git+https://github.com/tu_usuario/mi_paquete.git@tu_rama",
    "crumbs": [
      "Semana Uno",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Paquetes en Python</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaCuatro/040_QuartoPresentacion.html",
    "href": "notebooks/semanaCuatro/040_QuartoPresentacion.html",
    "title": "40  Quarto presentación",
    "section": "",
    "text": "40.1 Insertar figura de una libreta",
    "crumbs": [
      "Semana Cuatro",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Quarto presentación</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaCuatro/040_QuartoPresentacion.html#insertar-figura-de-una-libreta",
    "href": "notebooks/semanaCuatro/040_QuartoPresentacion.html#insertar-figura-de-una-libreta",
    "title": "40  Quarto presentación",
    "section": "",
    "text": "Código\nfig, axs = plt.subplots(2,figsize=(10,3),sharex=True)\n\naxs[0].plot(tmx.To,label=\"To\")\n\naxs[1].plot(tmx.Ig,label=\"Ig\")\naxs[1].plot(tmx.Ib,label=\"Ib\")\n\nfor ax in axs:\n    ax.legend()\n\n\n\n\n\n\n\n\nFigura 40.1: Temperatura ambiente y radiación en Temixco, Morelos durante el 2018.",
    "crumbs": [
      "Semana Cuatro",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Quarto presentación</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaCuatro/040_QuartoPresentacion.html#ecuaciones-en-latex",
    "href": "notebooks/semanaCuatro/040_QuartoPresentacion.html#ecuaciones-en-latex",
    "title": "40  Quarto presentación",
    "section": "40.2 Ecuaciones en \\(\\LaTeX\\)",
    "text": "40.2 Ecuaciones en \\(\\LaTeX\\)\n\\[ \\frac{\\partial T}{\\partial t} = \\alpha \\left( \\frac{\\partial^2 T}{\\partial x^2} + \\frac{\\partial^2 T}{\\partial y^2} \\right)  \\]\n\n\\(T = T(x, y, t)\\) es la temperatura como función del espacio y del tiempo.\n\\(\\alpha\\) es la difusividad térmica del material.",
    "crumbs": [
      "Semana Cuatro",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Quarto presentación</span>"
    ]
  },
  {
    "objectID": "notebooks/semanaCuatro/040_QuartoPresentacion.html#resalta-código",
    "href": "notebooks/semanaCuatro/040_QuartoPresentacion.html#resalta-código",
    "title": "40  Quarto presentación",
    "section": "40.3 Resalta código",
    "text": "40.3 Resalta código\n  \nimport pandas as pd\nimport plotly.express as px\n\nf = '../../data/owid-co2-data.csv'\nco2 = pd.read_csv(f)\n\npx.line(co2, x = 'year',y='co2',color='country')",
    "crumbs": [
      "Semana Cuatro",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Quarto presentación</span>"
    ]
  }
]